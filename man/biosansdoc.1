.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "BIOSANSDOC" "1" "Dec 20, 2021" "" "biosans.doc"
.SH NAME
biosansdoc \- biosans.doc 0.2.0
.SH API REFERENCE
.sp
This page contains auto\-generated API reference documentation [1]\&.
.SS \fI\%BioSANS2020\fP
.SS Subpackages
.SS \fI\%BioSANS2020.analysis\fP
.SS Subpackages
.SS \fI\%BioSANS2020.analysis.numeric\fP
.SS Submodules
.SS \fI\%BioSANS2020.analysis.numeric.sample_points\fP
.sp
This module interpoltaes nsamp points from the trajectory.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%sample_points\fP(edata, nsamp=50000)
T}	T{
This function takes edata which is composed of numerical data and
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.sample_points.sample_points(edata, nsamp=50000)
This function takes edata which is composed of numerical data and
their labels and returns interpolated points.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
nsamp : number of points to sample from data
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
.INDENT 7.0
.TP
.B sdata
interpolated data points with sdata[0] is time and the
remaining rows are interpolated data that corresponds to
the time in sdata[0]
.UNINDENT
.sp
label_name : labels
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.analysis.numeric.transform_data\fP
.INDENT 0.0
.INDENT 3.5
This is the transform_data module
.UNINDENT
.UNINDENT
.sp
This module process numeric trajectories and either prints the result or
display the output into a text area embedded in a canvas or plots it
.sp
The following is the list of function for this module:
.INDENT 0.0
.IP 1. 3
normalize
.IP 2. 3
calc_cross_corr
.IP 3. 3
calc_covariance2
.IP 4. 3
calc_covariance
.IP 5. 3
fano_factor
.IP 6. 3
prob_density_calc
.IP 7. 3
prob_density_calc2
.IP 8. 3
prob_density_calc3
.IP 9. 3
ave_traj_calc
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%normalize\fP(vect)
T}	T{
returns the normalized form of the input vector v
T}
_
T{
\fI\%calc_cross_corr\fP(edata, items)
T}	T{
This function calculates the cross correlation of edata[0] and
T}
_
T{
\fI\%calc_covariance2\fP(edata)
T}	T{
This function calculates the covariance of edata[0] and prints
T}
_
T{
\fI\%calc_covariance\fP(edata, items, points=100)
T}	T{
This function calculates the covariance of edata[0] and prints
T}
_
T{
\fI\%fano_factor\fP(edata, items, points=100)
T}	T{
This function calculates the fano\-factor of edata[0] and prints
T}
_
T{
\fI\%prob_density_calc\fP(edata, items)
T}	T{
This function calculates the probability density of edata[0] and
T}
_
T{
\fI\%prob_density_calc2\fP(edata, items)
T}	T{
This function calculates the probability density of edata[0] and
T}
_
T{
\fI\%prob_density_calc3\fP(edata, items, bins=50)
T}	T{
This function calculates the probability density of edata[0] per
T}
_
T{
\fI\%ave_traj_calc\fP(edata, items)
T}	T{
This function calculates the average trajectory of edata[0] and
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.normalize(vect)
returns the normalized form of the input vector v
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.calc_cross_corr(edata, items)
This function calculates the cross correlation of edata[0] and
returns a plot of the correlation as a function of lags.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.calc_covariance2(edata)
This function calculates the covariance of edata[0] and prints
the result in a terminal window.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.calc_covariance(edata, items, points=100)
This function calculates the covariance of edata[0] and prints
the result in a text area embedded in a canvas.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
points : last number of points considered in covariance
.INDENT 0.0
.INDENT 3.5
calculation from \-points to the end of array
or equivalent to [\-points:] slice.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.fano_factor(edata, items, points=100)
This function calculates the fano\-factor of edata[0] and prints
the result in a text area embedded in a canvas.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
points : last number of points considered in fano\-factor
.INDENT 0.0
.INDENT 3.5
calculation from \-points to the end of array ([\-points:] slice)
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.prob_density_calc(edata, items)
This function calculates the probability density of edata[0] and
returns a plot of the probability density.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.prob_density_calc2(edata, items)
This function calculates the probability density of edata[0] and
returns a plot of the probability density with time.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.prob_density_calc3(edata, items, bins=50)
This function calculates the probability density of edata[0] per
bins and returns a plot of the probability density (time slice).
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
bins : number of bins an entire trajectory will be discretized
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.numeric.transform_data.ave_traj_calc(edata, items)
This function calculates the average trajectory of edata[0] and
returns a plot of the average trajectory as a function of time.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.analysis.plotting\fP
.SS Submodules
.SS \fI\%BioSANS2020.analysis.plotting.plot_traj\fP
.INDENT 0.0
.INDENT 3.5
This is the plot_traj module
.UNINDENT
.UNINDENT
.sp
This module process numeric trajectories and plots them
.sp
The following is the list of function for this module:
.INDENT 0.0
.IP 1. 3
plot_traj
.IP 2. 3
plot_traj2
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%plot_traj\fP(data, slabels, items, plotted, mix_plot=True, logx=False, logy=False, normalize=False, si_ticked=None)
T}	T{
This function plots time series trajectories.
T}
_
T{
\fI\%plot_traj2\fP(data, slabels, items, plotted, logx=False, logy=False, normalize=False, xlabel=\(aqconc\(aq, ylabel=\(aqconc\(aq, zlabel=\(aqconc\(aq, trange=None)
T}	T{
This function plots time series trajectories or phase portriat.
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.analysis.plotting.plot_traj.plot_traj(data, slabels, items, plotted, mix_plot=True, logx=False, logy=False, normalize=False, si_ticked=None)
This function plots time series trajectories.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B data
three dimensional data. The outermost index represents
the trajectories. Each row of trajectory contains a 2 x 2
numpy array where the rows is the time and the columns
are the labels. The first column is time and the next few
columns are the trajectories.
.UNINDENT
.sp
slabels : labels of the trajectories in data
items : 3 item list of [canvas, scroll_x, scroll_y]
plotted : an array where the figures plotted are pushed i.e.
.INDENT 0.0
.INDENT 3.5
plotted.append([plt.gca(), fig, lines]). This is used
for managing the plots in the GUI.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B mix_plot
if true, the all data will be plotted together in one
plot otherwise in seperate plots
.UNINDENT
.sp
logx : if true, uses logscale in x\-axis
logy : if true, uses logscale in y\-axis
normalize : normalized the data based on max(data)
si_ticked : list of indexes in slabels to be shown in plot
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.analysis.plotting.plot_traj.plot_traj2(data, slabels, items, plotted, logx=False, logy=False, normalize=False, xlabel=\(aqconc\(aq, ylabel=\(aqconc\(aq, zlabel=\(aqconc\(aq, trange=None)
This function plots time series trajectories or phase portriat.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B data
three dimensional data. The outermost index represents
the trajectories. Each row of trajectory contains a 2 x 2
numpy array where the rows is the time and the columns
are the labels. The first column is time and the next few
columns are the trajectories.
.UNINDENT
.sp
slabels : labels of the trajectories in data
items : 3 item list of [canvas, scroll_x, scroll_y]
plotted : an array where the figures plotted are pushed i.e.
.INDENT 0.0
.INDENT 3.5
plotted.append([plt.gca(), fig, lines]). This is used
for managing the plots in the GUI.
.UNINDENT
.UNINDENT
.sp
logx : if true, uses logscale in x\-axis
logy : if true, uses logscale in y\-axis
normalize : normalized the data based on max(data)
xlabel : label of x\-axis
ylabel : label of y\-axis
zlabel : label of y\-axis
trange : slice indexes of the trajectory i.e. \-1000:\-1
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.cli_functs\fP
.SS Submodules
.SS \fI\%BioSANS2020.cli_functs.ssl_calls\fP
.INDENT 0.0
.INDENT 3.5
This is the ssl_calls module
.UNINDENT
.UNINDENT
.sp
This module interacts with BioSSL.py by fulfilling its requests to pro\-
vide a console interface that supports some features of BioSANS.
.sp
The following is the list of function for this module:
.INDENT 0.0
.IP 1. 3
load_data_traj
.IP 2. 3
calc_average_conc_at_tend
.IP 3. 3
calc_covariance
.IP 4. 3
calc_covariance_per_traj
.IP 5. 3
calc_covariance_bootsrap
.IP 6. 3
prob_density_calc_wtime
.IP 7. 3
prob_density_calc_tslice
.IP 8. 3
prob_density_calc
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%load_data_traj\fP(file_name)
T}	T{
This function loads trajectory data from a tab delimited file.
T}
_
T{
\fI\%calc_average_conc_at_tend\fP(edata, points=100)
T}	T{
This function calculates the average or mean of edata[0] using
T}
_
T{
\fI\%calc_covariance\fP(edata, points=100)
T}	T{
This function calculates the covariance of edata[0] and prints
T}
_
T{
\fI\%calc_covariance_per_traj\fP(edata, points=100, fname=\(aq\(aq, mname=\(aq\(aq)
T}	T{
This function calculates the covariance of edata[0] per rows,
T}
_
T{
\fI\%calc_covariance_bootsrap\fP(edata, points=100, msamp=1000, fname=\(aq\(aq, mname=\(aq\(aq)
T}	T{
This function calculates the covariance of edata[0] with sampling
T}
_
T{
\fI\%prob_density_calc_wtime\fP(edata, fname, mname)
T}	T{
This function calculates the probability density of edata[0] and
T}
_
T{
\fI\%prob_density_calc_tslice\fP(edata, bins=50, fname=\(aq\(aq)
T}	T{
This function calculates the probability density of edata[0] per
T}
_
T{
\fI\%prob_density_calc\fP(edata, fname)
T}	T{
This function calculates the probability density of edata[0] and
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.load_data_traj(file_name)
This function loads trajectory data from a tab delimited file.
The first column in the file is time, the remaining columns are
species or components. All sampled trajectories are concatenated
in the file.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B file_name
name of trajectory file generated in BioSANS
simulations (either deterministic or stochastic).
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Return:
.INDENT 7.0
.TP
.B current_data
two dimensional array of [data, slabels].
slabels are the names in the header of file_name.
data is a list of trajectory data w/o header
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.calc_average_conc_at_tend(edata, points=100)
This function calculates the average or mean of edata[0] using
the last number of points in the trajectory. If the simulation is
long enought, this is the steady state mean concentration.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
points : number of data points to slice at end of trajectory
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.calc_covariance(edata, points=100)
This function calculates the covariance of edata[0] and prints
the result in a console.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.TP
.B points
last number of points considered in covariance
calculation from \-points to the end of array
or equivalent to [\-points:] slice.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.calc_covariance_per_traj(edata, points=100, fname=\(aq\(aq, mname=\(aq\(aq)
This function calculates the covariance of edata[0] per rows,
prints the result in a console, and plots data into image.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.TP
.B points
last number of points considered in covariance
calculation from \-points to the end of array ([\-points:] slice)
.UNINDENT
.sp
fname : prepended name to plots fname_mname*
mname : prepended name to plots fname_mname*
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.calc_covariance_bootsrap(edata, points=100, msamp=1000, fname=\(aq\(aq, mname=\(aq\(aq)
This function calculates the covariance of edata[0] with sampling
, prints the result in a console, and plots data into image.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.TP
.B points
last number of points considered in covariance
calculation from \-points to the end of array
or equivalent to [\-points:] slice.
.UNINDENT
.sp
msamp : number of randomly chosen trajectories
fname : prepended name to plots fname_mname*
mname : prepended name to plots fname_mname*
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.prob_density_calc_wtime(edata, fname, mname)
This function calculates the probability density of edata[0] and
returns a plot of the probability density with time.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
fname : prepended name to plots fname_mname*
mname : prepended name to plots fname_mname*
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.prob_density_calc_tslice(edata, bins=50, fname=\(aq\(aq)
This function calculates the probability density of edata[0] per
bins and returns a plot of the probability density.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
bins : number of bins an entire trajectory will be discretized
fname : name prepended to plot name
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.cli_functs.ssl_calls.prob_density_calc(edata, fname)
This function calculates the probability density of edata[0] and
returns a plot of the probability density.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B edata
two dimensional array of data & labels (data, label).
data is a 3D array where each row are the individual
trajectories. Each trajectory is a 2D numpy array where
the first column is time and the remaining columns are
the corresponding components.
.UNINDENT
.sp
items : 3 item list of [canvas, scroll_x, scroll_y]
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.gui_functs\fP
.SS Submodules
.SS \fI\%BioSANS2020.gui_functs.draw_figure\fP
.INDENT 0.0
.INDENT 3.5
This is the draw_figure module
.UNINDENT
.UNINDENT
.sp
This module controls how plots are drawn inside BioSANS canvas
.sp
The following is the list of function for this module:
.INDENT 0.0
.IP 1. 3
canvas_update_widgets
.IP 2. 3
delete_this
.IP 3. 3
draw_figure
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%canvas_update_widgets\fP(_, canvas)
T}	T{
This function update the canvas upon adding new objects by moving
T}
_
T{
\fI\%delete_this\fP(frame, canvas)
T}	T{
This function removes objects from the canvas and reorder objects
T}
_
T{
\fI\%draw_figure\fP(items, figure, loc=(0, 0))
T}	T{
This function draws figure to the canvas by first adding a canvas
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.draw_figure.canvas_update_widgets(_, canvas)
This function update the canvas upon adding new objects by moving
objects to ensure they fit nicely. The arrangement is that the last
object added appear first (latest goes on top).
Args:
.INDENT 7.0
.INDENT 3.5
canvas : the canvas object
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.draw_figure.delete_this(frame, canvas)
This function removes objects from the canvas and reorder objects
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.draw_figure.draw_figure(items, figure, loc=(0, 0))
This function draws figure to the canvas by first adding a canvas
object to the canvas, adding a frame to the newly created canvas and
putting the figure to FigureCanvasTkAgg with frame as the parent.
Args:
.INDENT 7.0
.INDENT 3.5
items : 3 item list of [canvas, scroll_x, scroll_y]
figure: the figure to be drawn in canvas i.e. plt.gcf() figure
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.gui_functs.prepare_canvas\fP
.INDENT 0.0
.INDENT 3.5
This is the prepare_canvas module
.UNINDENT
.UNINDENT
.sp
This module prepare the canvas for drawing figures, plots and images.
.sp
The following is the list of function for this module:
.INDENT 0.0
.IP 1. 3
prepare_frame_for_plot
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%prepare_frame_for_plot\fP(frame1a, width=1030, height=465)
T}	T{
This function prepares the frame that will serve as a parent of
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.prepare_canvas.prepare_frame_for_plot(frame1a, width=1030, height=465)
This function prepares the frame that will serve as a parent of
the canvas that will serve as a parent of many frames that will
contain figures, image, and plots.
Args:
.INDENT 7.0
.INDENT 3.5
frame1a : the parent frame
width : width of frame1a
height : height frame1a
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
tuple : (canvas, scroll_x, scroll_y)
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.gui_functs.scrollable_text\fP
.INDENT 0.0
.INDENT 3.5
This is the scrollable_text module
.UNINDENT
.UNINDENT
.sp
This module controls how text area are placed inside the canvas for
displaying output of computation, equations, etc.
.sp
The following is the list of function for this module:
.INDENT 0.0
.IP 1. 3
save_file
.IP 2. 3
tab
.IP 3. 3
delete_this
.IP 4. 3
prepare_scroll_text
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%save_file\fP(_, text)
T}	T{
Opens a file dialog box for saving the constents of the text area
T}
_
T{
\fI\%tab\fP(_, text)
T}	T{
insers tab or four spaces in the text area
T}
_
T{
\fI\%canvas_update_widgets\fP(_, canvas)
T}	T{
This function update the canvas upon adding new objects by moving
T}
_
T{
\fI\%delete_this\fP(frame, canvas)
T}	T{
This function removes objects from the canvas and reorder objects
T}
_
T{
\fI\%prepare_scroll_text\fP(items)
T}	T{
This function prepares the scrollable text area by creating a
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.scrollable_text.save_file(_, text)
Opens a file dialog box for saving the constents of the text area
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.scrollable_text.tab(_, text)
insers tab or four spaces in the text area
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.scrollable_text.canvas_update_widgets(_, canvas)
This function update the canvas upon adding new objects by moving
objects to ensure they fit nicely. The arrangement is that the last
object added appear first (latest goes on top).
Args:
.INDENT 7.0
.INDENT 3.5
canvas : the canvas object
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.scrollable_text.delete_this(frame, canvas)
This function removes objects from the canvas and reorder objects
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.gui_functs.scrollable_text.prepare_scroll_text(items)
This function prepares the scrollable text area by creating a
frame as a child of the canvas or items[0]. Scroll capabilities are
added and a Text area is created as a child of the frame.
Args:
.INDENT 7.0
.INDENT 3.5
items : 3 item list of [canvas, scroll_x, scroll_y]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
text : the text area object where text can be inserted
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.math_functs\fP
.SS Submodules
.SS \fI\%BioSANS2020.math_functs.sbml_math\fP
.INDENT 0.0
.INDENT 3.5
This module in the sbml_math module
.UNINDENT
.UNINDENT
.sp
This contains function needed to interpret SBML files.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%acos\fP(xvar)
T}	T{
returns sympy.acos(xvar).evalf()
T}
_
T{
\fI\%arccos\fP(xvar)
T}	T{
returns sympy.acos(xvar).evalf()
T}
_
T{
\fI\%acosh\fP(xvar)
T}	T{
returns sympy.acosh(xvar).evalf()
T}
_
T{
\fI\%arccosh\fP(xvar)
T}	T{
returns sympy.acosh(xvar).evalf()
T}
_
T{
\fI\%acot\fP(xvar)
T}	T{
returns sympy.acot(xvar).evalf()
T}
_
T{
\fI\%arccot\fP(xvar)
T}	T{
returns sympy.acot(xvar).evalf()
T}
_
T{
\fI\%acoth\fP(xvar)
T}	T{
returns sympy.acoth(xvar).evalf()
T}
_
T{
\fI\%arccoth\fP(xvar)
T}	T{
returns sympy.acoth(xvar).evalf()
T}
_
T{
\fI\%acsc\fP(xvar)
T}	T{
returns sympy.acsc(xvar).evalf()
T}
_
T{
\fI\%arccsc\fP(xvar)
T}	T{
returns sympy.acsc(xvar).evalf()
T}
_
T{
\fI\%acsch\fP(xvar)
T}	T{
returns sympy.acsch(xvar).evalf()
T}
_
T{
\fI\%arccsch\fP(xvar)
T}	T{
returns sympy.acsch(xvar).evalf()
T}
_
T{
\fI\%arcsec\fP(xvar)
T}	T{
returns sympy.asec(xvar).evalf()
T}
_
T{
\fI\%asech\fP(xvar)
T}	T{
returns sympy.asech(xvar).evalf()
T}
_
T{
\fI\%arcsech\fP(xvar)
T}	T{
returns sympy.asech(xvar).evalf()
T}
_
T{
\fI\%asin\fP(xvar)
T}	T{
returns sympy.asin(xvar).evalf()
T}
_
T{
\fI\%asinh\fP(xvar)
T}	T{
returns sympy.asinh(xvar).evalf()
T}
_
T{
\fI\%arcsinh\fP(xvar)
T}	T{
returns sympy.asinh(xvar).evalf()
T}
_
T{
\fI\%arcsin\fP(xvar)
T}	T{
returns sympy.asin(xvar).evalf()
T}
_
T{
\fI\%atan\fP(xvar)
T}	T{
returns sympy.atan(xvar).evalf()
T}
_
T{
\fI\%arctan\fP(xvar)
T}	T{
returns sympy.atan(xvar).evalf()
T}
_
T{
\fI\%atanh\fP(xvar)
T}	T{
returns sympy.atanh(xvar).evalf()
T}
_
T{
\fI\%arctanh\fP(xvar)
T}	T{
returns sympy.atanh(xvar).evalf()
T}
_
T{
\fI\%ceil\fP(xvar)
T}	T{
returns sympy.ceiling(xvar).evalf()
T}
_
T{
\fI\%ceiling\fP(xvar)
T}	T{
returns sympy.ceiling(xvar).evalf()
T}
_
T{
\fI\%cos\fP(xvar)
T}	T{
returns sympy.cos(xvar).evalf()
T}
_
T{
\fI\%cosh\fP(xvar)
T}	T{
returns sympy.cosh(xvar).evalf()
T}
_
T{
\fI\%cot\fP(xvar)
T}	T{
returns sympy.cot(xvar).evalf()
T}
_
T{
\fI\%coth\fP(xvar)
T}	T{
returns sympy.coth(xvar).evalf()
T}
_
T{
\fI\%csc\fP(xvar)
T}	T{
returns sympy.csc(xvar).evalf()
T}
_
T{
\fI\%csch\fP(xvar)
T}	T{
returns sympy.csch(xvar).evalf()
T}
_
T{
\fI\%factorial\fP(xvar)
T}	T{
returns sympy.factorial(xvar).evalf()
T}
_
T{
\fI\%exp\fP(xvar)
T}	T{
returns sympy.exp(xvar).evalf()
T}
_
T{
\fI\%floor\fP(xvar)
T}	T{
returns sympy.floor(xvar).evalf()
T}
_
T{
\fI\%ln\fP(xvar)
T}	T{
returns sympy.ln(xvar).evalf()
T}
_
T{
\fI\%log\fP(xvar)
T}	T{
returns sympy.log(xvar).evalf()
T}
_
T{
\fI\%log10\fP(xvar)
T}	T{
returns sympy.log(xvar, 10).evalf()
T}
_
T{
\fI\%piecewise\fP(*xvar)
T}	T{
returns the value before the first True value in xvar. If there
T}
_
T{
\fI\%pow\fP(xvar, yvar)
T}	T{
sympy.Pow(xvar, yvar).evalf()
T}
_
T{
\fI\%power\fP(xvar, yvar)
T}	T{
sympy.Pow(xvar, yvar).evalf()
T}
_
T{
\fI\%root\fP(nvar, xvar)
T}	T{
sympy.root(xvar, nvar).evalf()
T}
_
T{
\fI\%sec\fP(xvar)
T}	T{
returns sympy.sec(xvar).evalf()
T}
_
T{
\fI\%sech\fP(xvar)
T}	T{
sympy.sech(xvar).evalf()
T}
_
T{
\fI\%sqr\fP(xvar)
T}	T{
sympy.sqrt(xvar).evalf()
T}
_
T{
\fI\%sqrt\fP(xvar)
T}	T{
sympy.sqrt(xvar).evalf()
T}
_
T{
\fI\%sin\fP(xvar)
T}	T{
sympy.sin(xvar).evalf()
T}
_
T{
\fI\%sinh\fP(xvar)
T}	T{
sympy.sinh(xvar).evalf()
T}
_
T{
\fI\%tan\fP(xvar)
T}	T{
sympy.tan(xvar).evalf()
T}
_
T{
\fI\%tanh\fP(xvar)
T}	T{
sympy.tanh(xvar).evalf()
T}
_
T{
\fI\%And\fP(*xvar)
T}	T{
returns True if all elements of xvar is True else returns False
T}
_
T{
\fI\%Not\fP(xvar)
T}	T{
returns the reverse of the boolean value of xvar
T}
_
T{
\fI\%Or\fP(*xvar)
T}	T{
returns True if at least one value in xvar is True else False
T}
_
T{
\fI\%xor\fP(*xvar)
T}	T{
returns True if there is odd number of True else returns False
T}
_
T{
\fI\%eq\fP(*xvar)
T}	T{
returns True if xvar[0] == xvar[1:] else returns False
T}
_
T{
\fI\%geq\fP(*xvar)
T}	T{
returns True if xvar[0] >= xvar[1:] else returns False
T}
_
T{
\fI\%gt\fP(*xvar)
T}	T{
returns True if xvar[0] > xvar[1:] else returns False
T}
_
T{
\fI\%leq\fP(*xvar)
T}	T{
returns True if xvar[0] <= xvar[1:] else returns False
T}
_
T{
\fI\%lt\fP(*xvar)
T}	T{
returns True if xvar[0] < xvar[1:] else returns False
T}
_
T{
\fI\%neq\fP(xvar, yvar)
T}	T{
returns True if xvar != yvar else returns False
T}
_
T{
\fI\%plus\fP(*xvar)
T}	T{
sum(xvar).evalf()
T}
_
T{
\fI\%times\fP(*xvar)
T}	T{
returns the product of all elements in the list xvar
T}
_
T{
\fI\%minus\fP(xvar, yvar)
T}	T{
returns xvar \- yvar
T}
_
T{
\fI\%divide\fP(xvar, yvar)
T}	T{
returns xvar / yvar
T}
_
T{
\fI\%multiply\fP(*xvar)
T}	T{
returns the product of all elements in the list xvar
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%NUMBER_TYPE\fP
T}	T{
T}
_
T{
\fI\%SBML_FUNCT_DICT\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.NUMBER_TYPE
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.acos(xvar)
returns sympy.acos(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arccos(xvar)
returns sympy.acos(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.acosh(xvar)
returns sympy.acosh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arccosh(xvar)
returns sympy.acosh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.acot(xvar)
returns sympy.acot(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arccot(xvar)
returns sympy.acot(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.acoth(xvar)
returns sympy.acoth(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arccoth(xvar)
returns sympy.acoth(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.acsc(xvar)
returns sympy.acsc(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arccsc(xvar)
returns sympy.acsc(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.acsch(xvar)
returns sympy.acsch(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arccsch(xvar)
returns sympy.acsch(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arcsec(xvar)
returns sympy.asec(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.asech(xvar)
returns sympy.asech(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arcsech(xvar)
returns sympy.asech(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.asin(xvar)
returns sympy.asin(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.asinh(xvar)
returns sympy.asinh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arcsinh(xvar)
returns sympy.asinh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arcsin(xvar)
returns sympy.asin(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.atan(xvar)
returns sympy.atan(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arctan(xvar)
returns sympy.atan(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.atanh(xvar)
returns sympy.atanh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.arctanh(xvar)
returns sympy.atanh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.ceil(xvar)
returns sympy.ceiling(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.ceiling(xvar)
returns sympy.ceiling(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.cos(xvar)
returns sympy.cos(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.cosh(xvar)
returns sympy.cosh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.cot(xvar)
returns sympy.cot(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.coth(xvar)
returns sympy.coth(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.csc(xvar)
returns sympy.csc(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.csch(xvar)
returns sympy.csch(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.factorial(xvar)
returns sympy.factorial(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.exp(xvar)
returns sympy.exp(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.floor(xvar)
returns sympy.floor(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.ln(xvar)
returns sympy.ln(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.log(xvar)
returns sympy.log(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.log10(xvar)
returns sympy.log(xvar, 10).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.piecewise(*xvar)
returns the value before the first True value in xvar. If there
is no True value, returns the last element in vxar
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.pow(xvar, yvar)
sympy.Pow(xvar, yvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.power(xvar, yvar)
sympy.Pow(xvar, yvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.root(nvar, xvar)
sympy.root(xvar, nvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.sec(xvar)
returns sympy.sec(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.sech(xvar)
sympy.sech(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.sqr(xvar)
sympy.sqrt(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.sqrt(xvar)
sympy.sqrt(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.sin(xvar)
sympy.sin(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.sinh(xvar)
sympy.sinh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.tan(xvar)
sympy.tan(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.tanh(xvar)
sympy.tanh(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.And(*xvar)
returns True if all elements of xvar is True else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.Not(xvar)
returns the reverse of the boolean value of xvar
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.Or(*xvar)
returns True if at least one value in xvar is True else False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.xor(*xvar)
returns True if there is odd number of True else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.eq(*xvar)
returns True if xvar[0] == xvar[1:] else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.geq(*xvar)
returns True if xvar[0] >= xvar[1:] else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.gt(*xvar)
returns True if xvar[0] > xvar[1:] else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.leq(*xvar)
returns True if xvar[0] <= xvar[1:] else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.lt(*xvar)
returns True if xvar[0] < xvar[1:] else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.neq(xvar, yvar)
returns True if xvar != yvar else returns False
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.plus(*xvar)
sum(xvar).evalf()
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.times(*xvar)
returns the product of all elements in the list xvar
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.minus(xvar, yvar)
returns xvar \- yvar
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.divide(xvar, yvar)
returns xvar / yvar
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.multiply(*xvar)
returns the product of all elements in the list xvar
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.math_functs.sbml_math.SBML_FUNCT_DICT
.UNINDENT
.SS \fI\%BioSANS2020.model\fP
.SS Subpackages
.SS \fI\%BioSANS2020.model.fileconvert\fP
.SS Submodules
.SS \fI\%BioSANS2020.model.fileconvert.convtopotosbml\fP
.INDENT 0.0
.INDENT 3.5
This module is the convtopotosbml module
.UNINDENT
.UNINDENT
.sp
The sole purpose of this module is to faciliate conversion of topology
files into SBML files. Currently, this module still have a lot of
problems and the converted file may not run properly.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%topo_to_sbml\fP(sp_comp, ks_vals, conc, r_react, r_prods, vbig, v_volms, items=None, molar=False, rfile=None)
T}	T{
This function helps in the conversion of topology file to SBML.
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.convtopotosbml.topo_to_sbml(sp_comp, ks_vals, conc, r_react, r_prods, vbig, v_volms, items=None, molar=False, rfile=None)
This function helps in the conversion of topology file to SBML.
Consider a file containing the following reaction topology;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A <=> B, 0.5, 0.3
3 B => 2 C, 0.04
.sp
@CONCENTRATION
A, 100
B, 90
C, 80
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp
dictionary of components where the key is the
component and the value is a set of integers that tell
the rank or order of that reaction as it appears in
the file. For the above topology
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.TP
.B ks_vals
dictioary of parameters where the key is the line in
the file and the value is the list of parameter found
i.e. for the above topology;
ks_vals = {0: [0.5, 0.3], 1: [0.04]}
.TP
.B conc
dictionary of initial concentration i.e.
conc = {\(aqA\(aq: 100.0, \(aqB\(aq: 90.0, \(aqC\(aq: 80}
.TP
.B r_react
dictionary where the key is the line in the file and
the value is a dictionary of reactants where the key
is the component and the value is its stoichiometric
coefficient in that line i.e. for the above topology;
r_react = {0: {\(aqA\(aq: 1}, 1: {\(aqB\(aq: 3}}
.TP
.B r_prods
dictionary where the key is the line in the file and
the value is a dictionary of products where the key
is the component and the value is its stoichiometric
coefficient in that line i.e. for the above topology;
r_prods = {0: {\(aqB\(aq: 1}, 1: {\(aqC\(aq: 2}}
.UNINDENT
.sp
vbig : not used but pertains to stoichiometric matrix
v_volms : volume of compartment
items : 3 item list of [canvas, scroll_x, scroll_y]
molar : True if conc. is in molar otherwise False
rfile : path of the topology file + name of topology file
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.model.fileconvert.process_sbml\fP
.INDENT 0.0
.INDENT 3.5
The process_sbml module
.UNINDENT
.UNINDENT
.sp
This module contains functions that facilitates the conversion of sbml
file format into BioSANS topology format. Currently, this module highly
relies on string manipulations, sympify, eval, and exec python functions
.sp
The following are the list of function in this module
.INDENT 0.0
.IP 1. 4
get_exponent_sp
.IP 2. 4
replace_crucial_funct
.IP 3. 4
extract_species
.IP 4. 4
extract_par_num
.IP 5. 4
extract_var_func
.IP 6. 4
extract_function
.IP 7. 4
par_substitution
.IP 8. 4
add2_spaces_sep
.IP 9. 4
sp_substitution
.IP 10. 4
var_substitution
.IP 11. 4
funct_redefine_var
.IP 12. 4
get_sbml_units
.IP 13. 4
get_compartment_details
.IP 14. 4
get_species_details
.IP 15. 4
get_initial_conc
.IP 16. 4
get_param_DETAILS
.IP 17. 4
get_rule_details
.IP 18. 4
process_sbml
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%eval_exp\fP(xvar)
T}	T{
T}
_
T{
\fI\%get_exponent_sp\fP(key, modk)
T}	T{
This function extract the exponent of component or species key
T}
_
T{
\fI\%replace_crucial_funct\fP(trep)
T}	T{
this function converts some problematic operator/logical/function
T}
_
T{
\fI\%extract_species\fP(modk)
T}	T{
This function extracts the components or species from a given ex\-
T}
_
T{
\fI\%extract_par_num\fP(modk)
T}	T{
This function is currently not used but it can extract the
T}
_
T{
\fI\%extract_var_func\fP(ssv)
T}	T{
This function extract the variables from an expression and gives
T}
_
T{
\fI\%extract_function\fP(pforms, rbig_params, compartments, functions, functions_str)
T}	T{
This function converts a user defined function or function call
T}
_
T{
\fI\%par_substitution\fP(modk, parameters, index=0)
T}	T{
This function substitute parameters to modk expression by first
T}
_
T{
\fI\%add2_spaces_sep\fP(modk)
T}	T{
This function adds paddings on both sides of the operators and
T}
_
T{
\fI\%sp_substitution\fP(modk, parameters)
T}	T{
This is a redundant function to par_substitution. This function
T}
_
T{
\fI\%var_substitution\fP(modk, rbig_params, parameters, compartments, rate_rules)
T}	T{
This function substitute variables to modk expression by first
T}
_
T{
\fI\%funct_redefine_var\fP(modk, ssv)
T}	T{
This function transform the variables in a lambda function to the
T}
_
T{
\fI\%get_sbml_units\fP(model, sbml_units)
T}	T{
Returns units dictionary from sbml file. The model is defined by
T}
_
T{
\fI\%get_compartments_details\fP(model, molar)
T}	T{
Returns compartment dictionary from sbml file. The model is
T}
_
T{
\fI\%get_species_details\fP(model)
T}	T{
Returns species dictionary from sbml file. The model is
T}
_
T{
\fI\%get_initial_conc\fP(species)
T}	T{
Returns a dictionary of initial concentration from species
T}
_
T{
\fI\%get_param_details\fP(model)
T}	T{
Returns a dictionary of parameter name : [value, unit]
T}
_
T{
\fI\%get_rule_details\fP(model, constant_par)
T}	T{
This function returns the assignment rules, rate rules, and
T}
_
T{
\fI\%process_sbml\fP(file, molar=False, variables=None)
T}	T{
This function read the sbml file and extracts the necessary most
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%OPERS_LIST\fP
T}	T{
T}
_
T{
\fI\%OPERS_LIST2\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.OPERS_LIST
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.OPERS_LIST2
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.eval_exp(xvar)
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.get_exponent_sp(key, modk)
This function extract the exponent of component or species key
from a given propensity expression modk.
Args:
.INDENT 7.0
.INDENT 3.5
key : species/component string
modk : propensity expression converted to string
.INDENT 0.0
.INDENT 3.5
example "2*0.5*A*B"
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
exponent_in_formula : the power of species key
.TP
.B Example:
modk = (1.0)*(1.0)*S1
key = S1
exponent_in_formula = 1
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.replace_crucial_funct(trep)
this function converts some problematic operator/logical/function
and etc. to its equivalent in SBML.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B trep
result of SBML formulaToString(xvar.getMath())
xvar is an object in SBML getListOfFunctionDefinitions()
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.extract_species(modk)
This function extracts the components or species from a given ex\-
pression and returns a comma concatenated string of them.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B modk
propensity expression converted to string
example "2*0.5*A*B"
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
.INDENT 7.0
.TP
.B ",".join(sp_comp)
a string of comma concatenated components
example "A,B"
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.extract_par_num(modk)
This function is currently not used but it can extract the
numeric values from a given expression
Example:
.INDENT 7.0
.INDENT 3.5
print(extract_par_num("(5.0)*(6.0)*S1+S2**3")) will give
{\(aq5.0\(aq, \(aq6.0\(aq, \(aq3\(aq}
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.extract_var_func(ssv)
This function extract the variables from an expression and gives
a 2D list containing a comma concatenated string of variable and a
string of the expression.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ssv
comma concatenated string of variables and expression.
example :  "x,y,x*y"
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
.INDENT 7.0
.TP
.B ["comma concatenated variables","expression"] :
example : [\(aqx,y\(aq, \(aqx*y\(aq]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.extract_function(pforms, rbig_params, compartments, functions, functions_str)
This function converts a user defined function or function call
in the SBML file to actual expression.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B pforms
from formulaToString(xvar.getMath()) where xvar can be
an object from getListOfRules() in libsbml.
example : compartment*multiply(k1,S1)
.TP
.B rbig_params
dictionary of parameter nameparameter value
from kinetic rate law expression in sbml
.UNINDENT
.sp
compartments : dictionary of compartments name : [size, units]
functions : dictionary of function name : function definition
functions_str : the string equivalent of functions above
.INDENT 0.0
.INDENT 3.5
example : {\(aqmultiply\(aq: \(aqlambda x,y : x*y\(aq}
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
.INDENT 7.0
.TP
.B modk
expanded form of pforms where every function definition
is evaluated
example : compartment*1*(S1*k1)
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.par_substitution(modk, parameters, index=0)
This function substitute parameters to modk expression by first
padding the operators to ensure parameters can be distinguished from
the expression.
Args:
.INDENT 7.0
.INDENT 3.5
modk : math expression string
parameters : dictionary of parameters name : [value, unit]
index : 0 or 1. 0 will give value and 1 will give unit
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
modk : expression where parameters are now numeric
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.add2_spaces_sep(modk)
This function adds paddings on both sides of the operators and
return the expression modk with the operators padded.
Args:
.INDENT 7.0
.INDENT 3.5
modk : string math expression
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
modk : string math expression with the operators padded
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.sp_substitution(modk, parameters)
This is a redundant function to par_substitution. This function
substitute parameters to modk expression by first padding the
operators to ensure parameters can be distinguished fromthe
expression.
Args:
.INDENT 7.0
.INDENT 3.5
modk : math expression string
parameters : dictionary of parameters name : [value, unit]
.INDENT 0.0
.INDENT 3.5
Intended for constant parameters
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
modk : expression where parameters are now numeric
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.var_substitution(modk, rbig_params, parameters, compartments, rate_rules)
This function substitute variables to modk expression by first
padding the operators to ensure variables can be distinguished from
the expression.
Args:
.INDENT 7.0
.INDENT 3.5
modk : math expression string
rbig_params : dictionary of parameter name : parameter value
.INDENT 0.0
.INDENT 3.5
from kinetic rate law expression in sbml
.UNINDENT
.UNINDENT
.sp
parameters : dictionary of parameters name : [value, unit]
compartments : dictionary of compartments name : [size, units]
rate_rules : dictionary of variable : variable modifier function
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
modk : expression where variables are substituted
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.funct_redefine_var(modk, ssv)
This function transform the variables in a lambda function to the
actual variables needed.
Args:
.INDENT 7.0
.INDENT 3.5
modk : string math lambda expression with abstract variables
ssv : sympy symbols
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
string definition expression with actual varaibles
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.get_sbml_units(model, sbml_units)
Returns units dictionary from sbml file. The model is defined by
the following python syntax;
.INDENT 7.0
.INDENT 3.5
model = libsbml.SBMLReader().readSBML(sbml_file).getModel()
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.INDENT 3.5
model : model definition like shown above
sbml_units : a dictionary of sbml unit equivalence
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns :
units_sbml : dictionary of sbml units associated to the file
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.get_compartments_details(model, molar)
Returns compartment dictionary from sbml file. The model is
defined by the following python syntax;
.INDENT 7.0
.INDENT 3.5
model = libsbml.SBMLReader().readSBML(sbml_file).getModel()
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Args:
model : model definition like shown above
molar : True if conc. is in molar else False
.TP
.B Returns:
.INDENT 7.0
.TP
.B compartments
dictionary of all compartments with the following
example format { \(aqc1\(aq : [size, units]}
.TP
.B constant_comp
dictionary of constant compartments
example format { \(aqc1\(aq : [size, units]}
.TP
.B non_constant_comp
dictionary of non constant compartments
example format { \(aqc1\(aq : [size, units]}
.TP
.B orig_size
dictionary of original size of compartment
example format { \(aqc1\(aq : size}
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.get_species_details(model)
Returns species dictionary from sbml file. The model is
defined by the following python syntax;
.INDENT 7.0
.INDENT 3.5
model = libsbml.SBMLReader().readSBML(sbml_file).getModel()
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Args:
model : model definition like shown above
.TP
.B Returns:
.INDENT 7.0
.TP
.B species
dictionary of all species with the following
example format { id : species_label }
.TP
.B species_comp
dictionary of species compartments
example format { species_label : compartment }
.TP
.B constant_species
dictionary of constant species
example format { species_label : True }
.TP
.B has_only_sunits
dictionary of species with only substance as
example format { id : True }
.TP
.B sp_wcfactor
dictionary of convertion factor
example format { id : conversion factor }
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.get_initial_conc(species)
Returns a dictionary of initial concentration from species
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.get_param_details(model)
Returns a dictionary of parameter name : [value, unit]
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.get_rule_details(model, constant_par)
This function returns the assignment rules, rate rules, and
algebraic rules from sbml model given the disctionary of constant
parameters. The constants are already substituted in the return
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.fileconvert.process_sbml.process_sbml(file, molar=False, variables=None)
This function read the sbml file and extracts the necessary most
of the details to construct the corresponding topology file of the
system described by the SBML tags.
Args:
.INDENT 7.0
.INDENT 3.5
file : this is the sbml file
molar : True or False, tells if the systems unit molar or not
variables : None or constant compartment to show in plot
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.model.ode_parse\fP
.SS Submodules
.SS \fI\%BioSANS2020.model.ode_parse.ode_extract\fP
.INDENT 0.0
.INDENT 3.5
This is the ode_extract module
.UNINDENT
.UNINDENT
.sp
This module grabs stoichiometric matrix, propensity vector, and chemical
reaction from a list of strings containing python expression
.sp
List of functions:
.INDENT 0.0
.IP 1. 3
process
.IP 2. 3
prop_extr
.IP 3. 3
term_ext
.IP 4. 3
get_prop_stoich
.IP 5. 3
print_stoich_prop
.IP 6. 3
grab_rxn_ksn
.IP 7. 3
transform_to_rxn
.IP 8. 3
odedxdt_to_topo
.UNINDENT
.sp
For a given set of chemical species and corresponding ODE expression,
this script can be used as follows;
.INDENT 0.0
.IP 1. 3
Declare the list of ODE and variables or grab the list from a file.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
x = ["m","P"]
dx_dt = ["km \- m*rm","kp*m \- P*rp"]
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 2. 3
Use "transform_to_rxn" command to get reactions that match the ODE.
.UNINDENT
.INDENT 0.0
.INDENT 3.5
transform_to_rxn(x, dx_dt)
.UNINDENT
.UNINDENT
.sp
The result of this command is as follows;
.INDENT 0.0
.INDENT 3.5
0 NONE => 1.0 m, 1 ::::: lambda   : km
1.0 m => 0 NONE, 1 ::::: lambda m : m*rm
1.0 P => 0 NONE, 1 ::::: lambda P : P*rp
0 NONE => 1.0 P, 1 ::::: lambda m : kp*m
.UNINDENT
.UNINDENT
.sp
The first line corresponds to the formation of mRNA m with a rate
constant of km. The second line is degradation of m with degradation
constant rm. The third line is degradation of protein with degradation
constant rp. The last line is the formation of P with rate constant kp.
The lambda expression after the delimiter \(aq:::::\(aq tells us the
propensity for each reaction which is provided after \(aq:\(aq. The 0 NONE
means there is no defined reactant and or degradation product for this
reaction.
.INDENT 0.0
.IP 3. 3
Use "print_stoich_prop" to print stoichiometric matrix and
.UNINDENT
.INDENT 0.0
.INDENT 3.5
propensity vector.
.INDENT 0.0
.INDENT 3.5
print_stoich_prop(dx_dt)
.UNINDENT
.UNINDENT
.sp
The result is as follows;
.sp
1.0*km \- 1.0*m*rm
\-1.0*P*rp + 1.0*kp*m
.sp
[1.00000000000000, \-1.00000000000000, 0, 0]
[0, 0, \-1.00000000000000, 1.00000000000000]
.sp
[km]
[m*rm]
[P*rp]
[kp*m]
.UNINDENT
.UNINDENT
.sp
The first two line here is the declared ODE. After the space, is the
stoichiometric matrix. The rows corresponds to the species declared in
step 1 i.e. first row in the matrix corresponds to x[0] or m and the
second row corresponds to x[1] or P. The columns correspond to the terms
in the propensity as listed after the stoichiometric matrix.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%process\fP(xvar)
T}	T{
This function formats the expression xvar into a form that can be
T}
_
T{
\fI\%prop_extr\fP(expr, prop)
T}	T{
This function extracts the propensity terms from the expression
T}
_
T{
\fI\%term_ext\fP(expr)
T}	T{
This function extracts the terms from the expression expr which
T}
_
T{
\fI\%get_prop_stoich\fP(dxdt)
T}	T{
This function extracts the propensity vector and stoichiometric
T}
_
T{
\fI\%print_stoich_prop\fP(dxdt)
T}	T{
This function extracts the propensity vector and stoichiometric
T}
_
T{
\fI\%grab_rxn_ksn\fP(stch_var, xvar, w_var)
T}	T{
This function transform the stoichiometric matrix, species or
T}
_
T{
\fI\%transform_to_rxn\fP(xvar, dxdt, x_ini=None, k_rc=None, items=None)
T}	T{
This function transform the list of components and list of ODE
T}
_
T{
\fI\%odedxdt_to_topo\fP(mfile, items)
T}	T{
This function reads BioSANS ODE file format and converts it to
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%DONE_PARSING\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.DONE_PARSING
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.process(xvar)
This function formats the expression xvar into a form that can be
easily processed by stripping and replacing invalid operators.
Args:
.INDENT 7.0
.INDENT 3.5
xvar : mathematical expresson i.e. \(aqA*B*ka/(C**2 + 1)\(aq
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
val : same as xvar but with invalid operator removed
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.prop_extr(expr, prop)
This function extracts the propensity terms from the expression
expr which is a string of python mathematical expression. Propensity
terms are the terms that can be separated by + or \- without the
numerical coefficient or stoichiometric multiplier.
Args:
.INDENT 7.0
.INDENT 3.5
expr : mathematical expresson i.e. \(aqA*B*ka/(C**2 + 1)\(aq
prop : propensity list to append extracted propensity term
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.term_ext(expr)
This function extracts the terms from the expression expr which
is a string of python mathematical expression. The terms are part of
expr which can be separated by + or \- with the numerical coefficient
or stoichiometric multiplier.
Args:
.INDENT 7.0
.INDENT 3.5
expr : mathematical expresson i.e. \(aqA*B*ka/(C**2 + 1)\(aq
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
term : the list of extracted terms
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.get_prop_stoich(dxdt)
This function extracts the propensity vector and stoichiometric
matrix from the list of ordinary differential equation.
Args:
.INDENT 7.0
.INDENT 3.5
dxdt : list of strings of mathematical expression
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns :
v_stoich : stoichiometric matrix (sympy Matrix)
w_var : propensity vector ( sympy type Matrix )
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.print_stoich_prop(dxdt)
This function extracts the propensity vector and stoichiometric
matrix from the list of ordinary differential equation and prints
the output in the console.
Args:
.INDENT 7.0
.INDENT 3.5
dxdt : list of strings of mathematical expression
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.grab_rxn_ksn(stch_var, xvar, w_var)
This function transform the stoichiometric matrix, species or
components, and propensity vector into a list of reactions and list
of rate constants.
Args:
.INDENT 7.0
.INDENT 3.5
stch_var : stoichiometric matrix or 2D Matrix of coefficient
xvar     : list of components or species
w_var    : propensity vector or 1D Matrix of fluxes
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
rxn_var  : list of reaction similar to BioSANS reactions format
ksn_var  : set of rate constant symbols if not numeric
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.transform_to_rxn(xvar, dxdt, x_ini=None, k_rc=None, items=None)
This function transform the list of components and list of ODE
into BioSANS topology file format.
Args:
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B xvar
list of components or species (variable in ODE)
example ["m","P"]
.TP
.B dxdt
list of differential equations (python string)
example ["km \- m*rm","kp*m \- P*rp"]
.TP
.B x_ini
dictionary of initial conecentration or value
example {"m" : 10, "p" : 0}
.TP
.B k_rc
dictionary of rate constant symbols abd values
example {"km" : 0.1, "rm" : 0.2}
.UNINDENT
.sp
items    : list containing [canvas, scroll_x, scroll_y]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
text     : text area where the outputs are written
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.ode_parse.ode_extract.odedxdt_to_topo(mfile, items)
This function reads BioSANS ODE file format and converts it to
BioSANS topology file format. The ODE file contains ODE expression,
initial concentration, and rate constants separated by tags. There
are three tags that is currently supported : ODE_DECLARATIONS,
INI_CONCENTRATIONS, and RATE_CONSTANTS. Provided below is an example
of the content of a typical ODE file.
.INDENT 7.0
.INDENT 3.5
ODE_DECLARATIONS:
A = \-ka*A*B/(1+C**2) + kf1/(1+B**2)
B = \-ka*A*B/(1+C**2)
C = \-kc*C + kf2
D = ka*A*B/(1+C**2) \- kf2
.sp
INI_CONCENTRATIONS:
A = 100
B = 200
C = 150
D = 0
.sp
RATE_CONSTANTS:
ka = 0.02
kf1 = 0.2
kc = 0.03
kf2 = 0.01
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Args:
mfile    : file containing list of ODE expression
items    : list containing [canvas, scroll_x, scroll_y]
.TP
.B Returns:
text     : text area where the outputs are written
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.model.param_est\fP
.SS Submodules
.SS \fI\%BioSANS2020.model.param_est.my_mcem\fP
.INDENT 0.0
.INDENT 3.5
This module is the my_mcem module
.UNINDENT
.UNINDENT
.sp
This module is a simple implementation of monte\-carlo expectation maximi
zation. The likelihood  function here is the joint probability distribu\-
tion of the  error or  the difference between the true value and estima\-
ted value. The error on each parameter estimate  is assumed to  be inde\-
pendent and follows a normal  distribution. A uniform prior was set. The
log\-likelihood  of  this function becomes the negative of the sum of the
squared  error  between  the  estimated value and true value. Parameters
were drawn  from  a log\-normal distribution. In our  implementation, the
posterior  probability  is  calculated at each sampling  stage.  In  the
maximization step, the  ratio of posterior  probability between consecu\-
tive draws (or the exponential of the difference between consecutive log
\-likelihood) are  used to decide  whether to accept or reject the latest
values of the parameters based on a uniform random variable. After seve\-
ral samplings  (decided programmatically in the algorithm), the mean and
standard deviation of the parameters  from all  the accepted  values are
calculated  and  used as the mean  and standard  deviation  for the next
sampling  stage.  This serves as the expectation step in our implementa\-
tion because we  do not have a  close form for the parameters. The cycle
is repeated until  the calculated  mean and  standard deviations of each
parameters are no longer changing or  until  the maximum number of steps
is reached.
.sp
The following are the functions inside this module
.INDENT 0.0
.IP 1. 3
log_likelihood
.IP 2. 3
cost_value
.IP 3. 3
exptn_maxtn
.IP 4. 3
run_mcem
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%log_likelihood\fP(ks_var, custom_function, args=None)
T}	T{
This function evaluates the loglikelihood based on the definitons
T}
_
T{
\fI\%cost_value\fP(ks_var, custom_function, args=None)
T}	T{
This function  evaluates  the cost value or SSE of the definitons
T}
_
T{
\fI\%exptn_maxtn\fP(lst, seed_var, maxiter=50, inner_loop=1000, lenks=3, positive_only=False, likelihood=None, args=None, thr=1e\-10)
T}	T{
This  function  performs  the  expectation  step and maximization
T}
_
T{
\fI\%run_mcem\fP(chains, n_pars, maxiter=5, inner_loop=5 * 1000, positive_only=False, likelihood=None, arg=None, r_rand=np.random.uniform(0, 1))
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.my_mcem.log_likelihood(ks_var, custom_function, args=None)
This function evaluates the loglikelihood based on the definitons
provided in the custom_function. Here, it is the negative of the sum
of squared errors between true and estimated value.
.INDENT 7.0
.TP
.B Args:
ks_var (list): list of parameter values
custom_function (function): user/program defined objective/error
.INDENT 7.0
.INDENT 3.5
function  to  optimized  my expectation  maximization  or EM
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B args (tuple): Tuple  of  (data,  conc, tvar,  sp_comp,  ks_dict,
r_dict,  p_dict,  v_stoich,  c_miss,  k_miss, molar, rfile).
Defaults  to None. See param_estimate module for  the proper
definition of variables.
.UNINDENT
.TP
.B Returns:
float: numeric value of custom_function(ks_var, args)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.my_mcem.cost_value(ks_var, custom_function, args=None)
This function  evaluates  the cost value or SSE of the definitons
provided in the custom_function.
.INDENT 7.0
.TP
.B Args:
ks_var (list): list of parameter values
custom_function (function): user/program defined objective/error
.INDENT 7.0
.INDENT 3.5
function  to  optimized  my  expectation  maximization or EM
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B args (tuple): Tuple  of  (data,  conc, tvar,  sp_comp,  ks_dict,
r_dict,  p_dict,  v_stoich,  c_miss,  k_miss, molar, rfile).
Defaults  to None. See param_estimate module for  the proper
definition of variables.
.UNINDENT
.TP
.B Returns:
float: numeric value of custom_function(ks_var, args)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.my_mcem.exptn_maxtn(lst, seed_var, maxiter=50, inner_loop=1000, lenks=3, positive_only=False, likelihood=None, args=None, thr=1e\-10)
This  function  performs  the  expectation  step and maximization
steps  bounded by  maxiter and inner_loop  variables. The process is
similar to the metrololis  hasting algorithm. There is a random walk
performed as the  posterior probability is maximized. The parameters
are updated in the randomwalk based on sampled values.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B lst (multiprocessing.managers.ListProxy):
multiprocessing.Manager() from proc_global module. This help
in halting simulation when one of the chains already achived
the defined tolerance.
.TP
.B seed_var (float): random  seed  value picked  at random for each
trajectory. They have been sampled from the calling program.
.TP
.B maxiter (int, optional):  maximum  number  of expectation steps.
Defaults to 50. This is the outer loop.
.TP
.B inner_loop (int, optional): maximum number of maximization step.
Defaults to 1000.
.UNINDENT
.sp
lenks (int, optional): numbers  unknown  parameters to estimate.
positive_only (bool, optional): constraint the parameter estima\-
.INDENT 7.0
.INDENT 3.5
tion to choose positive values. Defaults to False.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B likelihood (function, optional): user/program defined objective/
error function  to  optimized
.TP
.B args (tuple): Tuple  of  (data,  conc, tvar,  sp_comp,  ks_dict,
r_dict,  p_dict,  v_stoich,  c_miss,  k_miss, molar, rfile).
Defaults  to None. See param_estimate module for  the proper
definition of variables.
.UNINDENT
.sp
thr (function, optional): error tolerance. Defaults to 1.0e\-10.
.TP
.B Returns:
tuple: (list of estimated parameter, minimum error)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.my_mcem.run_mcem(chains, n_pars, maxiter=5, inner_loop=5 * 1000, positive_only=False, likelihood=None, arg=None, r_rand=np.random.uniform(0, 1))
[summary]
.INDENT 7.0
.TP
.B Args:
chains (integer): number of parallel runs or chains
n_pars (integer): number of parameters
maxiter (int, optional):  maximum  number  of expectation steps.
.INDENT 7.0
.INDENT 3.5
Defaults to 50. This is the outer loop.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B inner_loop (int, optional): maximum number of maximization step.
Defaults to 1000.
.TP
.B positive_only (bool, optional): constraint the parameter estima\-
tion to choose positive values. Defaults to False.
.TP
.B likelihood (function, optional): user/program defined objective/
error function  to  optimized
.TP
.B args (tuple): Tuple  of  (data,  conc, tvar,  sp_comp,  ks_dict,
r_dict,  p_dict,  v_stoich,  c_miss,  k_miss, molar, rfile).
Defaults  to None. See param_estimate module for  the proper
definition of variables.
.UNINDENT
.sp
r_rand (float, optional): np.random.uniform(0, 1) for seeding
.TP
.B Returns:
[type]: [description]
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.model.param_est.param_estimate\fP
.INDENT 0.0
.INDENT 3.5
This is the param_est module
.UNINDENT
.UNINDENT
.sp
The following are the functions inside this module
.INDENT 0.0
.IP 1. 3
load_data
.IP 2. 3
custom_likelihood
.IP 3. 3
ave_abs_dev
.IP 4. 3
label_param
.IP 5. 3
param_estimate
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%load_data\fP(file=None)
T}	T{
This function reads the trajectory file containing the data which
T}
_
T{
\fI\%custom_likelihood\fP(ks_par, args=None)
T}	T{
This  function returns  the negative of the sum of squared errors
T}
_
T{
\fI\%ave_abs_dev\fP(ks_par, args=None)
T}	T{
This  function  returns  the  mean of relative absolute deviation
T}
_
T{
\fI\%label_param\fP(k_miss, c_miss, ks_par)
T}	T{
[summary]
T}
_
T{
\fI\%param_estimate\fP(conc, tvar, sp_comp, ks_dict, r_dict, p_dict, v_stoich, items, molar=False, mode=\(aqMCEM\(aq, true_data_fil=None, rfile=None)
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_estimate.load_data(file=None)
This function reads the trajectory file containing the data which
should follow the following example format;
.sp
time        A       B
0.0 100.0   0.0
0.25        88.24969025197632       11.750309748023732
0.5 77.88007831231087       22.119921687689185
0.75        68.72892784164061       31.27107215835944
1.0 60.65306592491437       39.346934075085684
1.25        53.526142785532 46.473857214468055
1.5 47.236655135816875      52.76334486418318
1.75        41.68620193454698       58.31379806545308
2.0 36.78794415253036       63.21205584746969
2.25        32.46524678349081       67.53475321650924
\&...
.sp
The format  above have  a header where the first  column is time and
all other columns are species or components. The rows are the values
of measurements  corresponding to  the header. Each row is delimited
by  tab character " ". If  the data file is in excel, just copy the
data  from  excel to a text editor, save  it with a  filename and it
will already  be tab delimited. If there  are several  replicates of
the  data, just append them to  the end without  the header and this
function can still handle all replicates.
.sp
time        A       B
0.0 100.0   0.0                                 # first replicate
\&...                                             # continuation
0.0 100.0   0.0                                 # second replicate
\&...                                             # continuation
.INDENT 7.0
.TP
.B Args:
file (string, optional): trajectory file. Defaults to None.
.TP
.B Returns:
.INDENT 7.0
.TP
.B tuple: tuple  of  data and  labels (data, labels). The data is a
list of all  the trajectories in the file and the labels are
the corresponding name of the columns in the trajectory
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_estimate.custom_likelihood(ks_par, args=None)
This  function returns  the negative of the sum of squared errors
between the true value of trajectory and estimated trajectory. This
serves  as the fitness/objective/cost function  with a maximum value
of zero.
.INDENT 7.0
.TP
.B Args:
ks_par (list): list of parameters
args (tuple): Tuple  of  (data,  conc, tvar,  sp_comp,  ks_dict,
.INDENT 7.0
.INDENT 3.5
r_dict,  p_dict,  v_stoich,  c_miss,  k_miss, molar, rfile).
Defaults  to None. See param_estimate function for  the pro\-
per definition of each variables.
.UNINDENT
.UNINDENT
.TP
.B Returns:
float: negative of the sum of squared error
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_estimate.ave_abs_dev(ks_par, args=None)
This  function  returns  the  mean of relative absolute deviation
between the true value of trajectory and estimated trajectory. This
serves  as the fitness/objective/cost function  with a maximum value
of zero.
.INDENT 7.0
.TP
.B Args:
ks_par (list): list of parameters
args (tuple): Tuple  of  (data,  conc, tvar,  sp_comp,  ks_dict,
.INDENT 7.0
.INDENT 3.5
r_dict,  p_dict,  v_stoich,  c_miss,  k_miss, molar, rfile).
Defaults  to None. See param_estimate function for  the pro\-
per definition of each variables.
.UNINDENT
.UNINDENT
.TP
.B Returns:
float: mean of relative absolute deviation
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_estimate.label_param(k_miss, c_miss, ks_par)
[summary]
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B k_miss (list): list of position of unkwon parameters in the
reaction tag of BioSANS topology file. For example;
.sp
#REACTIONS
A => B , \-1      # forward rate constant is unknown
B <=> C, \-1, \-1  # forward and backward is unknown
.sp
The negative values means rate constant is unknown for those
reaction.
.sp
The value of k_miss will be;
.INDENT 7.0
.INDENT 3.5
k_miss = [(0,0), (1, 0), (1, 1)]
.UNINDENT
.UNINDENT
.sp
The format of the tuple is;
.INDENT 7.0
.INDENT 3.5
(reaction index, rate constant index)
(0, 0) \- first reaction, first rate constant
(1, 0) \- second reaction, first rate constant
(1, 1) \- second reaction, second rate constant
.UNINDENT
.UNINDENT
.TP
.B c_miss (list): component/species without trajectory data. They
can be set in a topology file with negative values as well.
.sp
@CONCENTRATION
A, Ao
B, \-1
C, Co
.sp
The value of c_miss will be;
.INDENT 7.0
.INDENT 3.5
c_miss = [\(aqB\(aq]
.UNINDENT
.UNINDENT
.TP
.B ks_par (list): list of estimated parameter values for k_miss as
it appears sequencially and list of initial value for c_miss
as it appears sequencially.
.sp
Example;
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_par = [
k1f, # numeric value for position (0, 0)
k2f, # numeric value for position (1, 0)
k2b, # numeric value for position (1, 1)
Bo   # numeric initial value for B
.UNINDENT
.sp
]
.UNINDENT
.UNINDENT
.UNINDENT
.TP
.B Returns:
dictionary: dictionary  of estimated  values  with the following
format {label : estimate,...}
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_estimate.param_estimate(conc, tvar, sp_comp, ks_dict, r_dict, p_dict, v_stoich, items, molar=False, mode=\(aqMCEM\(aq, true_data_fil=None, rfile=None)
[summary]
.INDENT 7.0
.TP
.B Args:
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
v_stoich (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
items (list): list of [canvas, scroll_x, scroll_y]
molar (bool, optional): If True, the units for any amount is in
.INDENT 7.0
.INDENT 3.5
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mode (str, optional): parameter estimation method keyword which
is  one of "MCEM", "DEvol", "NeldMead", "Powell", "L\-BFGS\-B"
.TP
.B true_data_fil (string, optional): file  name  of  the trajectory
file containing experimental or observed trajectory.
Defaults to None.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.TP
.B Returns:
tuple: (0, param_res) where param_res is a dictionary of estima\-
ted  values  with the following format {label : estimate,...}
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.model.param_est.param_slider\fP
.INDENT 0.0
.INDENT 3.5
This module is the param_slider module
.UNINDENT
.UNINDENT
.sp
The  sole purpose of this  module is  to visually  modify parameters and
compare the result to a PLOTTED data as the estimate changes in the plot
.sp
The functions in this modules are;
.INDENT 0.0
.IP 1. 3
load_data
.IP 2. 3
param_ode_model
.IP 3. 3
update_range
.IP 4. 3
submit
.UNINDENT
.sp
5. update
5. param_ode_int
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%load_data\fP()
T}	T{
This function reads the trajectory file containing the data which
T}
_
T{
\fI\%param_ode_model\fP(z_var, _, sp_comp, ks_dict, r_dict, p_dict, v_stoich, molar=False)
T}	T{
This fuction returns the differential equation of components with
T}
_
T{
\fI\%update_range\fP(dk_var, valc)
T}	T{
This function  controls  the  parameter  values  in  the plot and
T}
_
T{
\fI\%submit\fP(text, dk_var)
T}	T{
This function prepares the 2 item list of slider minimum and
T}
_
T{
\fI\%update\fP(ks_dict, kk_list, fig, slabels, lvar, sp_comp, r_dict, p_dict, v_stoich, molar, t_var, z_var)
T}	T{
[summary]
T}
_
T{
\fI\%param_ode_int\fP(conc, t_var, sp_comp, ks_dict, r_dict, p_dict, v_stoich, molar=False, rfile=\(aq\(aq, set_p=None)
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_slider.load_data()
This function reads the trajectory file containing the data which
should follow the following example format;
.sp
time        A       B
0.0 100.0   0.0
0.25        88.24969025197632       11.750309748023732
0.5 77.88007831231087       22.119921687689185
0.75        68.72892784164061       31.27107215835944
1.0 60.65306592491437       39.346934075085684
1.25        53.526142785532 46.473857214468055
1.5 47.236655135816875      52.76334486418318
1.75        41.68620193454698       58.31379806545308
2.0 36.78794415253036       63.21205584746969
2.25        32.46524678349081       67.53475321650924
\&...
.sp
The format  above have  a header where the first  column is time and
all other columns are species or components. The rows are the values
of measurements  corresponding to  the header. Each row is delimited
by  tab character " ". If  the data file is in excel, just copy the
data  from  excel to a text editor, save  it with a  filename and it
will already  be tab delimited. If there  are several  replicates of
the  data, just append them to  the end without  the header and this
function can still handle all replicates.
.sp
time        A       B
0.0 100.0   0.0                                 # first replicate
\&...                                             # continuation
0.0 100.0   0.0                                 # second replicate
\&...                                             # continuation
.INDENT 7.0
.TP
.B Args:
file (string, optional): trajectory file. Defaults to None.
.TP
.B Returns:
.INDENT 7.0
.TP
.B tuple: tuple  of  data and  labels (data, labels). The data is a
list of all  the trajectories in the file and the labels are
the corresponding name of the columns in the trajectory
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_slider.param_ode_model(z_var, _, sp_comp, ks_dict, r_dict, p_dict, v_stoich, molar=False)
This fuction returns the differential equation of components with
respect to time.
.INDENT 7.0
.TP
.B Args:
z_var (list): list of initial concentration
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
v_stoich (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B molar (bool, optional): If True, the units for any amount is in
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.TP
.B Returns:
dxdt (numpy.ndarray): value of time derivatives of components
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_slider.update_range(dk_var, valc)
This function  controls  the  parameter  values  in  the plot and
updates the limits of the slider object.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B dk_var (matplotlib.widgets.Slider): Slider object that controls
parameter values in plot
.UNINDENT
.sp
valc (list): 2 item list of slider minimum and maximum value
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_slider.submit(text, dk_var)
This function prepares the 2 item list of slider minimum and
maximum value.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B text (string): The user defined range in the TextBox separated
by comma i.e. "0.1,10"
.TP
.B dk_var (matplotlib.widgets.Slider): Slider object that controls
parameter values in plot
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_slider.update(ks_dict, kk_list, fig, slabels, lvar, sp_comp, r_dict, p_dict, v_stoich, molar, t_var, z_var)
[summary]
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
kk_list (list): list of matplotlib.widgets.Slider(Slider object)
fig (matplotlib.pylab.figure): plt.subplots object
slabels (list): list of components key in sp_comp
lvar (list): list of matplotlib.pylab.plot or plt.plot objects
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
v_stoich (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B molar (bool, optional): If True, the units for any amount is in
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.sp
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
z_var (list): list of initial concentration
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.model.param_est.param_slider.param_ode_int(conc, t_var, sp_comp, ks_dict, r_dict, p_dict, v_stoich, molar=False, rfile=\(aq\(aq, set_p=None)
[summary]
.INDENT 7.0
.TP
.B Args:
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
v_stoich (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B molar (bool, optional): If True, the units for any amount is in
molar. Propensity will be macroscopic. Defaults to False.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.TP
.B set_p (list, optional): 2 item list of [xscale log, yscale log]
and maximum value. Defaults to None. Values can be any of
[0,0],[0,1],[1,0],[1,1]
.UNINDENT
.TP
.B Returns:
[type]: [description]
.UNINDENT
.UNINDENT
.SS Submodules
.SS \fI\%BioSANS2020.model.new_file\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
This module is the new_file module
.UNINDENT
.UNINDENT
.sp
This module helps in displaying a new text area for typing topology,
.UNINDENT
.UNINDENT
.sp
codes, or regular text.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%new_file\fP(items)
T}	T{
This function returns a blank text area for typing
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.new_file.new_file(items)
This function returns a blank text area for typing
Args:
.INDENT 7.0
.INDENT 3.5
items (tuple): (canvas, scroll_x, scroll_y)
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
tkinter.Text: text area where a user can type
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.model.topology_view\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
This is the topology_view module
.UNINDENT
.UNINDENT
.sp
This module helps to load topology files into a text area for
.UNINDENT
.UNINDENT
.sp
displaying in BioSANS.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%view_topo\fP(topo, items)
T}	T{
This function open topology files and display the topology into a
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.model.topology_view.view_topo(topo, items)
This function open topology files and display the topology into a
text area for further simulation or for editing.
.INDENT 7.0
.TP
.B Args:
topo (string): topology file name
items (tuple): (canvas, scroll_x, scroll_y)
.TP
.B Returns:
.INDENT 7.0
.TP
.B tkinter.Text: text area where topology is displayed. A user can
type and modify the topology
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.myglobal\fP
.SS Submodules
.SS \fI\%BioSANS2020.myglobal.mglobals\fP
.INDENT 0.0
.INDENT 3.5
This module is the mglobals module
.UNINDENT
.UNINDENT
.sp
Variables global to  all modules are listed here and instantiated in one
of the main calling module such as BioSANS module and BioSSL module.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%init\fP(self)
T}	T{
Re initiate global variable just in case needed
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%PLOT_I\fP
T}	T{
T}
_
T{
\fI\%INT_VARS\fP
T}	T{
T}
_
T{
\fI\%CONTAINER\fP
T}	T{
T}
_
T{
\fI\%PLOTTED\fP
T}	T{
T}
_
T{
\fI\%MODIFIED\fP
T}	T{
T}
_
T{
\fI\%PROP_MODIFIED\fP
T}	T{
T}
_
T{
\fI\%CON_BOUNDARY\fP
T}	T{
T}
_
T{
\fI\%TO_CONVERT\fP
T}	T{
T}
_
T{
\fI\%SETTINGS\fP
T}	T{
T}
_
T{
\fI\%EXEC_FUNCTIONS\fP
T}	T{
T}
_
T{
\fI\%DELAY_LIST\fP
T}	T{
T}
_
T{
\fI\%TCHECK\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.PLOT_I  = 0
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.INT_VARS  = []
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.CONTAINER  = []
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.PLOTTED  = []
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.MODIFIED
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.PROP_MODIFIED
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.CON_BOUNDARY
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.TO_CONVERT  =
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.SETTINGS
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.EXEC_FUNCTIONS  = []
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.DELAY_LIST
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.TCHECK  = []
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.mglobals.init(self)
Re initiate global variable just in case needed
.UNINDENT
.SS \fI\%BioSANS2020.myglobal.proc_global\fP
.INDENT 0.0
.INDENT 3.5
This module is the proc_global module
.UNINDENT
.UNINDENT
.sp
The  main  purpose of this module is  to observed module wide processes.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%init\fP(self)
T}	T{
Initiate process related global variables
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%MANAGER\fP
T}	T{
T}
_
T{
\fI\%LST\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.proc_global.MANAGER
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.proc_global.LST
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.myglobal.proc_global.init(self)
Initiate process related global variables
.UNINDENT
.SS \fI\%BioSANS2020.prepcodes\fP
.SS Submodules
.SS \fI\%BioSANS2020.prepcodes.process\fP
.INDENT 0.0
.INDENT 3.5
This is the process module
.UNINDENT
.UNINDENT
.sp
This module reads BioSANS topology file, grab the components or species,
rate  constants, stoichiometric  matrix,  propensity   vector, algebraic
rules, conditional statements, and othe types of definitions into a dic\-
tionary.  This module  calls the process_hub  module that distribute the
tasks to other modules.
.sp
The functions in this module are as follows; #
.INDENT 0.0
.IP 1. 3
eval_dict
.IP 2. 3
tofloat
.IP 3. 3
is_number
.IP 4. 3
process
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%eval_dict\fP(to_eval, loc_dict)
T}	T{
This function takes a string expression and return the evaluated
T}
_
T{
\fI\%tofloat\fP(val, loc_dict)
T}	T{
This function attempts to convert the input val into float
T}
_
T{
\fI\%is_number\fP(xvar)
T}	T{
This function checks if a string xvar is float
T}
_
T{
\fI\%process\fP(rfile=\(aqReactions\(aq, miter=1, conc_unit=\(aqmolecules\(aq, v_volms=1e\-20, tend=1, del_coef=10, normalize=False, logx=False, logy=False, method=\(aqCLE\(aq, tlen=1000, mix_plot=True, save=True, out_fname=\(aq\(aq, plot_show=True, time_unit=\(aqtime (sec)\(aq, vary=\(aq\(aq, vary2=\(aq\(aq, mult_proc=False, implicit=False, items=None, exp_data_file=None, c_input=None)
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.prepcodes.process.eval_dict(to_eval, loc_dict)
This function takes a string expression and return the evaluated
expression using SBML_FUNCT_DICT and the locals() dictionary where
eval_dict is called.
.INDENT 7.0
.TP
.B Args:
to_eval (str): the expression to evaluate
loc_dict (dict): local dictionary from the calling function
.TP
.B Returns:
multitype: result of eval command
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.prepcodes.process.tofloat(val, loc_dict)
This function attempts to convert the input val into float
.INDENT 7.0
.TP
.B Args:
val (str): the expression to evaluate
loc_dict (dict): local dictionary from the calling function
.TP
.B Returns:
float: float equivalent of val
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.prepcodes.process.is_number(xvar)
This function checks if a string xvar is float
.INDENT 7.0
.TP
.B Args:
xvar (str): input string expression or number
.TP
.B Returns:
bool: True if xvar cal be converted to float otherwise False
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.prepcodes.process.process(rfile=\(aqReactions\(aq, miter=1, conc_unit=\(aqmolecules\(aq, v_volms=1e\-20, tend=1, del_coef=10, normalize=False, logx=False, logy=False, method=\(aqCLE\(aq, tlen=1000, mix_plot=True, save=True, out_fname=\(aq\(aq, plot_show=True, time_unit=\(aqtime (sec)\(aq, vary=\(aq\(aq, vary2=\(aq\(aq, mult_proc=False, implicit=False, items=None, exp_data_file=None, c_input=None)
[summary]
.INDENT 7.0
.TP
.B Args:
rfile (str): file name of BioSANS topology file.
miter (int, optional): Number of iteration or trajectory samples
.INDENT 7.0
.INDENT 3.5
for stochastic integration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B conc_unit (bool, optional): "mole","molar", or "molecules" \- the
unit used in any amount in topology file. Defaults to
"molecules".
.TP
.B v_volms (float, optional): the volume of compartment used in the
simulation. Defaults to 1.0e\-20.
.UNINDENT
.sp
tend (float): trajectory simulation end time. Defaults to 1.
del_coef (float, optional): factor for modifying time steps used
.INDENT 7.0
.INDENT 3.5
in the integration/propagation of ODE. Defaults to 10.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B normalize (bool, optional): True  will  be normalized the y axis
based on max value . Defaults to False.
.TP
.B logx (bool, optional): If True, the x\-axis will be in log scale.
Defaults to False.
.TP
.B logy (bool, optional): if True, the y\-axis will be in log scale.
Defaults to False.
.TP
.B method (str, optional): Defaults to "CLE". Any of the option in
the list of available method keywords is listed below;
.sp
Stochastic (refer to section 10.2.4)
.INDENT 7.0
.IP 1. 3
"CLE"            \- Molecules(micro), tau\-adaptive
.IP 2. 3
"CLE2"           \- Molecules(micro), cle\-fixIntvl
.IP 3. 3
"
.nf
Gillespie_
.fi
"     \- Molecules(micro), Direct method
.IP 4. 3
.INDENT 3.0
.TP
.B "Tau\-leaping"    \- Molecules(micro),
Not swapping with Gillespie
.UNINDENT
.IP 5. 3
.INDENT 3.0
.TP
.B "Tau\-leaping2"   \- Molecules(micro),
Swapping with Gillespie
.UNINDENT
.IP 6. 3
.INDENT 3.0
.TP
.B "Sim\-TauLeap"    \- Molecules(micro), Simplified,
Swapping with Gillespie
.UNINDENT
.UNINDENT
.sp
Deterministic (refer to section 10.2.1)
.INDENT 7.0
.IP 7. 4
"Euler\-1"        \- Molecules(micro), tau\-adaptive\-1
.IP 8. 4
"Euler\-2"        \- Molar (macro), tau\-adaptive\-1
.IP 9. 4
"Euler\-3"        \- Mole (macro), tau\-adaptive\-1
.IP 10. 4
"Euler2\-1"           \- Molecules(micro), tau\-adaptive\-2
.IP 11. 4
"Euler2\-2"       \- Molar (macro), tau\-adaptive\-2
.IP 12. 4
"Euler2\-3"       \- Mole (macro), tau\-adaptive\-2
.IP 13. 4
.INDENT 4.0
.TP
.B "ODE\-1"          \- Molecules(micro),
using ode_int from scipy
.UNINDENT
.IP 14. 4
.INDENT 4.0
.TP
.B "ODE\-2"          \- Molar(macro),
using ode_int from scipy
.UNINDENT
.IP 15. 4
"ODE\-3"          \- Mole(macro), using ode_int from scipy
.IP 16. 4
"rk4\-1"          \- Molecules(micro), fix\-interval
.IP 17. 4
"rk4\-2"          \- Molar(macro), fix\-interval
.IP 18. 4
"rk4\-3"          \- Mole(macro), fix\-interval
.IP 19. 4
"rk4\-1a"         \- Molecules(micro), tau\-adaptive
.IP 20. 4
"rk4\-2a"         \- Molar(macro), tau\-adaptive
.IP 21. 4
"rk4\-3a"         \- Mole(macro), tau\-adaptive
.UNINDENT
.sp
Linear Noise Approximation (refer to 10.1.2 & 10.2.2)
.INDENT 7.0
.IP 22. 4
"LNA"             \- Numeric, values
.IP 23. 4
"LNA\-vs"          \- Symbolic, values, Macroscopic
.IP 24. 4
"LNA\-ks"          \- Symbolic, f(ks), Macroscopic
.IP 25. 4
"LNA\-xo"          \- Symbolic, f(xo), Macroscopic
.IP 26. 4
"LNA2"            \- Symbolic, f(xo,ks), Microscopic
.IP 27. 4
"LNA3"            \- Symbolic, f(xo,ks), Macroscopic
.IP 28. 4
"LNA(t)"          \- COV\-time\-dependent, Macroscopic
.IP 29. 4
"LNA2(t)"         \- FF\-time\-dependent, Macroscopic
.UNINDENT
.sp
Network Localization (refer to 10.1.3)
.INDENT 7.0
.IP 30. 4
"NetLoc1"         \- Symbolic, Macroscopic
.IP 31. 4
"NetLoc2"         \- Numeric, Macroscopic
.UNINDENT
.sp
Parameter estimation (refer to 10.2.3)
.INDENT 7.0
.IP 32. 5
"k_est1"          \- MCEM, Macroscopic
.IP 33. 5
"k_est2"          \- MCEM, Microscopic
.IP 34. 5
"k_est3"          \- NM\-Diff. Evol., Macroscopic
.IP 35. 5
"k_est4"          \- NM\-Diff. Evol., Microscopic
.IP 36. 5
"k_est5"          \- Parameter slider/scanner
.IP 37. 5
"k_est6"          \- Nelder\-Mead (NM), Macroscopic
.IP 38. 5
"k_est7"          \- Nelder\-Mead (NM), Microscopic
.IP 39. 5
"k_est8"          \- Powell, Macroscopic
.IP 40. 5
"k_est9"          \- Powell, Microscopic
.IP 41. 5
"k_est10"         \- L\-BFGS\-B, Macroscopic
.IP 42. 5
"k_est11"         \- L\-BFGS\-B, Microscopic
.UNINDENT
.sp
Symbolic/Analytical expression of species (refer to 10.1.1)
.INDENT 7.0
.IP 43. 4
"Analyt"          \- Pure Symbolic :f(t,xo,k)
.IP 44. 4
"Analyt\-ftx"      \- Semi\-Symbolic :f(t,xo)
.IP 45. 4
"SAnalyt"         \- Semi\-Symbolic :f(t)
.IP 46. 4
"SAnalyt\-ftk"     \- Semi\-Symbolic :f(t,k)
.IP 47. 4
"Analyt2"         \- Creates commands for wxmaxima
.UNINDENT
.TP
.B tlen (int, optional): number of integration steps reported in
the final result. Defaults to 1000.
.TP
.B mix_plot (bool, optional): If True, all species are plotted in
one plot/figure. Defaults to True.
.TP
.B save (bool, optional): If True, the resulting trajectory in the
simulation will be saved as a file. Defaults to True.
.UNINDENT
.sp
out_fname (str, optional): output filename. Defaults to "".
plot_show (bool, optional): If True, an image of the plots will
.INDENT 7.0
.INDENT 3.5
be created in the directory of the topology file.
.UNINDENT
.UNINDENT
.sp
time_unit (str, optional): Defaults to "time (sec)".
vary (str, optional): Varying initial concentration.
.INDENT 7.0
.INDENT 3.5
Defaults to "".
.UNINDENT
.UNINDENT
.sp
vary2 (str, optional): [description]. Defaults to "".
mult_proc (bool, optional): If True, trajectories will be propa\-
.INDENT 7.0
.INDENT 3.5
gated on parallel. Defaults to False.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B items (tuple, optional): (canvas, scroll_x, scroll_y).
Defaults to None.
.TP
.B exp_data_file ([type], optional): Experimental data file contai\-
ning True or accepted trajectories. Defaults to None.
.UNINDENT
.sp
c_input (dict, optional): [description]. Defaults to {}.
.TP
.B Returns:
.INDENT 7.0
.TP
.B list: list of simulated trajecotry.
data[j][0] \- time for trajectory j
data[j][1][:, i] \- trajectories of each component i
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.prepcodes.processes_hub\fP
.INDENT 0.0
.INDENT 3.5
This module is the processes_hub module
.UNINDENT
.UNINDENT
.sp
The purpose of this module is to direct the information from the process
module into other modules. This module expects some to get some response
or data from thos emodule where its directs the information. The respon\-
ses will be saved or plotted depending on the options provided to this
module.
.sp
The following are the list of function in this module.
.INDENT 0.0
.IP 1. 3
process_hub
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%process_hub\fP(time_var, sp_comp, ksn_dict, concn, r_dict, p_dict, stoch_var, v_volms=1, miter=1, logx=False, logy=False, del_coef=10, normalize=False, method=\(aqCLE\(aq, mix_plot=True, save=True, out_fname=\(aq\(aq, plot_show=True, time_unit=\(aqtime (sec)\(aq, vary=\(aq\(aq, mult_proc=False, items=None, vary2=\(aq\(aq, implicit=False, rfile=\(aq\(aq, exp_data_file=None)
T}	T{
This function  redirect all information from the process to other
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.prepcodes.processes_hub.process_hub(time_var, sp_comp, ksn_dict, concn, r_dict, p_dict, stoch_var, v_volms=1, miter=1, logx=False, logy=False, del_coef=10, normalize=False, method=\(aqCLE\(aq, mix_plot=True, save=True, out_fname=\(aq\(aq, plot_show=True, time_unit=\(aqtime (sec)\(aq, vary=\(aq\(aq, mult_proc=False, items=None, vary2=\(aq\(aq, implicit=False, rfile=\(aq\(aq, exp_data_file=None)
This function  redirect all information from the process to other
modules and expect the return from those  module for plotting or for
saving into a file.
.INDENT 7.0
.TP
.B Args:
time_var (list): list of time points in the simulation
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ksn_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stoch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B stoch_var = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
v_volms (float, optional): volume of compartment. Defaults to 1.
miter (int, optional): Number of iteration or trajectory samples
.INDENT 7.0
.INDENT 3.5
for stochastic integration
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B logx (bool, optional): If True, the x\-axis will be in log scale.
Defaults to False.
.TP
.B logy (bool, optional): if True, the y\-axis will be in log scale.
Defaults to False.
.TP
.B del_coef (float, optional): factor for modifying time steps used
in the integration/propagation of ODE. Defaults to 10.
.TP
.B normalize (bool, optional): True  will  be normalized the y axis
based on max value . Defaults to False.
.TP
.B method (str, optional): Defaults to "CLE". Any of the option in
the list of available method keywords is listed below;
.sp
Stochastic (refer to section 10.2.4)
.INDENT 7.0
.IP 1. 3
"CLE"            \- Molecules(micro), tau\-adaptive
.IP 2. 3
"CLE2"           \- Molecules(micro), cle\-fixIntvl
.IP 3. 3
"
.nf
Gillespie_
.fi
"     \- Molecules(micro), Direct method
.IP 4. 3
.INDENT 3.0
.TP
.B "Tau\-leaping"    \- Molecules(micro),
Not swapping with Gillespie
.UNINDENT
.IP 5. 3
.INDENT 3.0
.TP
.B "Tau\-leaping2"   \- Molecules(micro),
Swapping with Gillespie
.UNINDENT
.IP 6. 3
.INDENT 3.0
.TP
.B "Sim\-TauLeap"    \- Molecules(micro), Simplified,
Swapping with Gillespie
.UNINDENT
.UNINDENT
.sp
Deterministic (refer to section 10.2.1)
.INDENT 7.0
.IP 7. 4
"Euler\-1"        \- Molecules(micro), tau\-adaptive\-1
.IP 8. 4
"Euler\-2"        \- Molar (macro), tau\-adaptive\-1
.IP 9. 4
"Euler\-3"        \- Mole (macro), tau\-adaptive\-1
.IP 10. 4
"Euler2\-1"           \- Molecules(micro), tau\-adaptive\-2
.IP 11. 4
"Euler2\-2"       \- Molar (macro), tau\-adaptive\-2
.IP 12. 4
"Euler2\-3"       \- Mole (macro), tau\-adaptive\-2
.IP 13. 4
.INDENT 4.0
.TP
.B "ODE\-1"          \- Molecules(micro),
using ode_int from scipy
.UNINDENT
.IP 14. 4
.INDENT 4.0
.TP
.B "ODE\-2"          \- Molar(macro),
using ode_int from scipy
.UNINDENT
.IP 15. 4
"ODE\-3"          \- Mole(macro), using ode_int from scipy
.IP 16. 4
"rk4\-1"          \- Molecules(micro), fix\-interval
.IP 17. 4
"rk4\-2"          \- Molar(macro), fix\-interval
.IP 18. 4
"rk4\-3"          \- Mole(macro), fix\-interval
.IP 19. 4
"rk4\-1a"         \- Molecules(micro), tau\-adaptive
.IP 20. 4
"rk4\-2a"         \- Molar(macro), tau\-adaptive
.IP 21. 4
"rk4\-3a"         \- Mole(macro), tau\-adaptive
.UNINDENT
.sp
Linear Noise Approximation (refer to 10.1.2 & 10.2.2)
.INDENT 7.0
.IP 22. 4
"LNA"             \- Numeric, values
.IP 23. 4
"LNA\-vs"          \- Symbolic, values, Macroscopic
.IP 24. 4
"LNA\-ks"          \- Symbolic, f(ks), Macroscopic
.IP 25. 4
"LNA\-xo"          \- Symbolic, f(xo), Macroscopic
.IP 26. 4
"LNA2"            \- Symbolic, f(xo,ks), Microscopic
.IP 27. 4
"LNA3"            \- Symbolic, f(xo,ks), Macroscopic
.IP 28. 4
"LNA(t)"          \- COV\-time\-dependent, Macroscopic
.IP 29. 4
"LNA2(t)"         \- FF\-time\-dependent, Macroscopic
.UNINDENT
.sp
Network Localization (refer to 10.1.3)
.INDENT 7.0
.IP 30. 4
"NetLoc1"         \- Symbolic, Macroscopic
.IP 31. 4
"NetLoc2"         \- Numeric, Macroscopic
.UNINDENT
.sp
Parameter estimation (refer to 10.2.3)
.INDENT 7.0
.IP 32. 5
"k_est1"          \- MCEM, Macroscopic
.IP 33. 5
"k_est2"          \- MCEM, Microscopic
.IP 34. 5
"k_est3"          \- NM\-Diff. Evol., Macroscopic
.IP 35. 5
"k_est4"          \- NM\-Diff. Evol., Microscopic
.IP 36. 5
"k_est5"          \- Parameter slider/scanner
.IP 37. 5
"k_est6"          \- Nelder\-Mead (NM), Macroscopic
.IP 38. 5
"k_est7"          \- Nelder\-Mead (NM), Microscopic
.IP 39. 5
"k_est8"          \- Powell, Macroscopic
.IP 40. 5
"k_est9"          \- Powell, Microscopic
.IP 41. 5
"k_est10"         \- L\-BFGS\-B, Macroscopic
.IP 42. 5
"k_est11"         \- L\-BFGS\-B, Microscopic
.UNINDENT
.sp
Symbolic/Analytical expression of species (refer to 10.1.1)
.INDENT 7.0
.IP 43. 4
"Analyt"          \- Pure Symbolic :f(t,xo,k)
.IP 44. 4
"Analyt\-ftx"      \- Semi\-Symbolic :f(t,xo)
.IP 45. 4
"SAnalyt"         \- Semi\-Symbolic :f(t)
.IP 46. 4
"SAnalyt\-ftk"     \- Semi\-Symbolic :f(t,k)
.IP 47. 4
"Analyt2"         \- Creates commands for wxmaxima
.UNINDENT
.TP
.B mix_plot (bool, optional): If True, all species are plotted in
one plot/figure. Defaults to True.
.TP
.B save (bool, optional): If True, the resulting trajectory in the
simulation will be saved as a file. Defaults to True.
.UNINDENT
.sp
out_fname (str, optional): output filename. Defaults to "".
plot_show (bool, optional): If True, an image of the plots will
.INDENT 7.0
.INDENT 3.5
be created in the directory of the topology file.
.UNINDENT
.UNINDENT
.sp
time_unit (str, optional): Defaults to "time (sec)".
vary (str, optional): Varying initial concentration.
.INDENT 7.0
.INDENT 3.5
Defaults to "".
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mult_proc (bool, optional): If True, trajectories will be propa\-
gated on parallel. Defaults to False.
.TP
.B items (tuple, optional): (canvas, scroll_x, scroll_y).
Defaults to None.
.UNINDENT
.sp
vary2 (str, optional): [description]. Defaults to "".
implicit (bool, optional): True means report in time intervals
.INDENT 7.0
.INDENT 3.5
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.UNINDENT
.UNINDENT
.sp
rfile (str): file name of BioSANS topology file.
exp_data_file ([type], optional): Experimental data file contai\-
.INDENT 7.0
.INDENT 3.5
ning True or accepted trajectories. Defaults to None.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation\fP
.SS Subpackages
.SS \fI\%BioSANS2020.propagation.deterministic\fP
.SS Submodules
.SS \fI\%BioSANS2020.propagation.deterministic.euler_mod\fP
.INDENT 0.0
.INDENT 3.5
This is the euler_mod module
.UNINDENT
.UNINDENT
.sp
The main  task  this module  do is to  integrate  ordinary  differential
equation (ODE)  using the Euler method. In  this module, two implementa\-
tion is provided. Both are tau\-adaptive.
.sp
The list of functions in this module are as follows;
.INDENT 0.0
.IP 1. 3
euler_model
.IP 2. 3
euler_int
.IP 3. 3
euler2_model
.IP 4. 3
euler_wer_est
.IP 5. 3
euler_help
.IP 6. 3
euler2_int
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%euler_model\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, d_time, del_coef, molar=False)
T}	T{
This function returns the ODE model as a list of evaluated deri\-
T}
_
T{
\fI\%euler_int\fP(t_var, sp_comp, ks_dict, sconc, r_dict, p_dict, stch_var, del_coef=10, lna_solve=False, items=None, implicit=False, molar=False, rfile=\(aq\(aq)
T}	T{
This function performs tau\-adpative euler integration. The tau is
T}
_
T{
\fI\%euler2_model\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, molar=False)
T}	T{
[summary]
T}
_
T{
\fI\%euler_wer_est\fP(h_var, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, molar)
T}	T{
This function serves to do some part of the task in euler_help
T}
_
T{
\fI\%euler_help\fP(htry, eps, yscal, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, molar)
T}	T{
This function serves to do some part of the task in euler2_int.
T}
_
T{
\fI\%euler2_int\fP(t_var, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, yscal=10, lna_solve=False, items=None, implicit=False, molar=False, rfile=\(aq\(aq)
T}	T{
This function performs tau\-adpative euler integration. The tau is
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.euler_mod.euler_model(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, d_time, del_coef, molar=False)
This function returns the ODE model as a list of evaluated deri\-
vative of each components at a particular intance given by the state
of the inputs.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B stch_var = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
d_time ([type]): [description]
del_coef (float, optional): factor for modifying time steps used
.INDENT 7.0
.INDENT 3.5
in the integration/propagation of ODE. Defaults to 10.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B molar
True if concentration or amount is in molar otherwise it
is  False. Defaults to  False. If molar is True, macroscopic
propensity is used. If it is False, microscopic propensity
is used.
.UNINDENT
.TP
.B Returns:
.INDENT 7.0
.TP
.B list: 2 element list i.e. [value of dx/dt, d_time] where x are
the components
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.euler_mod.euler_int(t_var, sp_comp, ks_dict, sconc, r_dict, p_dict, stch_var, del_coef=10, lna_solve=False, items=None, implicit=False, molar=False, rfile=\(aq\(aq)
This function performs tau\-adpative euler integration. The tau is
adjusted in such a way that limit the change of the fastest reaction
to del_coef amounts.
.INDENT 7.0
.TP
.B Args:
t_var (list): list of time points in the simulation
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
sconc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stoch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B stoch_var = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B del_coef (float, optional): factor for modifying time steps used
in the integration/propagation of ODE. Defaults to 10.
.TP
.B lna_solve (bool, optional): if True, proceed to linar noise
approximation calculations. Defaults to False.
.TP
.B items (list, optional): 3 item list of [canvas, scroll_x,
scroll_y], Defaults to None.
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B molar (bool, optional): True if concentration or amount is in
molar and you want to use macroscopic equations otherwise it
should be False and using microscopic equations. Defaults to
False.
.UNINDENT
.sp
rfile (str): file name of BioSANS topology file.
.TP
.B Returns:
tuple: (time, trajectory)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.euler_mod.euler2_model(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, molar=False)
[summary]
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stoch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B stoch_var = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B molar (bool, optional): True if concentration or amount is in
molar and you want to use macroscopic equations otherwise it
should be False and using microscopic equations. Defaults to
False.
.UNINDENT
.TP
.B Returns:
np.ndarray: derivative of components with respect to time at a
particular time or instant based on the current state of the
inputs.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.euler_mod.euler_wer_est(h_var, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, molar)
This function serves to do some part of the task in euler_help
and euler2_int.
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.euler_mod.euler_help(htry, eps, yscal, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, molar)
This function serves to do some part of the task in euler2_int.
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.euler_mod.euler2_int(t_var, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, yscal=10, lna_solve=False, items=None, implicit=False, molar=False, rfile=\(aq\(aq)
This function performs tau\-adpative euler integration. The tau is
adjusted to limit the error in each integration step as compared to
what a second order runge\-kutta would have predicted.
.INDENT 7.0
.TP
.B Args:
t_var (list): list of time points in the simulation
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
sconc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stoch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B stoch_var = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B yscal (float, optional): factor for modifying time steps used
in the integration/propagation of ODE. Defaults to 10.
.TP
.B lna_solve (bool, optional): if True, proceed to linar noise
approximation calculations. Defaults to False.
.TP
.B items (list, optional): 3 item list of [canvas, scroll_x,
scroll_y], Defaults to None.
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B molar (bool, optional): True if concentration or amount is in
molar and you want to use macroscopic equations otherwise it
should be False and using microscopic equations. Defaults to
False.
.UNINDENT
.sp
rfile (str): file name of BioSANS topology file.
.TP
.B Returns:
tuple: (time, trajectory)
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.deterministic.lna_approx\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
This is the lna_approx module
.UNINDENT
.UNINDENT
.sp
This module performs numerical linear noise approximation or LNA by
.UNINDENT
.UNINDENT
.sp
exploiting the following relationship.
.INDENT 0.0
.INDENT 3.5
AC + CA.T + BB = 0
.UNINDENT
.UNINDENT
.sp
where A is defined as d(S*f)/dx where S is the stoichiometric  matrix, f
are the propensities or fluxes, and x are the components or species. The
flux is a function of  x and rate constant k. BB is the diffusion matrix
equivalent  to S*diag(f)*S.T where diag(f) is a  square matrix with zero
non\-diagonal elements and f[i] in each diagonal elements.
.sp
The following are the list of function for this module.
.INDENT 0.0
.IP 1. 3
rem_rowcol_zero
.IP 2. 3
lna_ss_jacobian
.IP 3. 3
lna_model_ss
.IP 4. 3
lna_steady_state
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%rem_rowcol_zero\fP(a_mat)
T}	T{
This function removes rows and columns without non\-zero entries.
T}
_
T{
\fI\%lna_ss_jacobian\fP(model, zlist, sp_comp, stch_var, ks_dict, r_dict, p_dict)
T}	T{
This  function calculataes  the  jacobian  of  the model ODE with
T}
_
T{
\fI\%lna_model_ss\fP(zlist, sp_comp, ks_dict, r_dict, p_dict, stch_var)
T}	T{
This  function returns the derivative of components with respect
T}
_
T{
\fI\%lna_steady_state\fP(t_var, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None)
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_approx.rem_rowcol_zero(a_mat)
This function removes rows and columns without non\-zero entries.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B a_mat (np.ndarray): numpy matrix of A or d(S*f)/dx as described
in the module docstring.
.UNINDENT
.TP
.B Returns:
.INDENT 7.0
.TP
.B np.ndarray: numpy matrix with no rows and columns without non\-
zero entries.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_approx.lna_ss_jacobian(model, zlist, sp_comp, stch_var, ks_dict, r_dict, p_dict)
This  function calculataes  the  jacobian  of  the model ODE with
respect to the list of species concentration zlist.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B model (function): the ODE model returning derivative of species
or components as a function of time
.UNINDENT
.sp
zlist (list): list of components or species amounts
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
ks_dict (dict): dictionary of rate constant that appear in each
.INDENT 7.0
.INDENT 3.5
reactions.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.TP
.B Returns:
np.ndarray: jacobian matrix or d(S*f)/dx or A
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_approx.lna_model_ss(zlist, sp_comp, ks_dict, r_dict, p_dict, stch_var)
This  function returns the derivative of components with respect
to time at a particular state of the system based on the inputs.
.INDENT 7.0
.TP
.B Args:
zlist (list): list of components or species amounts
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
.TP
.B Returns:
np.ndarray: derivative of species with respect to time.d(S*f)/dt
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_approx.lna_steady_state(t_var, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None)
[summary]
.INDENT 7.0
.TP
.B Args:
t_var (list): time stamp
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
.sp
items (tuplel): (canvas, scroll_x, scroll_y). Defaults to None.
.TP
.B Returns:
[type]: [description]
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.deterministic.lna_function_of_time\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
This module is the lna_function_of_time module
.UNINDENT
.UNINDENT
.sp
This module performs numerical propagation of linear noise approxi\-
.UNINDENT
.UNINDENT
.sp
mation or LNA by exploiting the following relationship.
.INDENT 0.0
.INDENT 3.5
dC/dt = AC + CA.T + BB
.UNINDENT
.UNINDENT
.sp
where A is defined as d(S*f)/dx where S is the stoichiometric  matrix, f
are the propensities or fluxes, and x are the components or species. The
flux is a function of species x and rate constant k. BB is the diffusion
matrix equivalent to S*diag(f)*S.T where diag(f) is a square matrix with
zero non\-diagonal elements and f[i] in each diagonal elements. C is the
covariance matrix and t is time.
.sp
The following are the list of function for this module.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%lna_ode_model\fP(zlist, t_var, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False)
T}	T{
This  function returns the derivative of components with respect
T}
_
T{
\fI\%lna_cov_model\fP(a_jac, b_diff, cov)
T}	T{
Returns the evaluated dC/dt at a particular instant based on the
T}
_
T{
\fI\%lna_non_steady_state\fP(conc, t_var, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=True, rfile=\(aq\(aq, del_coef=10)
T}	T{
This function returns covariance trajectoy based on LNA
T}
_
T{
\fI\%lna_non_steady_state2\fP(conc, t_var, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=True, rfile=\(aq\(aq, del_coef=10)
T}	T{
This function returns Fan\-factor trajectoy based on LNA
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_function_of_time.lna_ode_model(zlist, t_var, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False)
This  function returns the derivative of components with respect
to time at a particular state of the system based on the inputs.
.INDENT 7.0
.TP
.B Args:
zlist (list): list of components or species amounts
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
molar (boolean) : if yes, uses macroscopic propensities else
.INDENT 7.0
.INDENT 3.5
uses microscopic propensities
.UNINDENT
.UNINDENT
.TP
.B Returns:
np.ndarray: derivative of species with respect to time.d(S*f)/dt
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_function_of_time.lna_cov_model(a_jac, b_diff, cov)
Returns the evaluated dC/dt at a particular instant based on the
current state of a_jac, b_diff, cov
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B a_jac (np.ndarray):  d(S*f)/dx or jacobian of ODE with respect
to components or species
.UNINDENT
.sp
b_diff (np.ndarray): diffusuin matrix
cov (np.ndarray): covariance matrix
.TP
.B Returns:
[type]: [description]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_function_of_time.lna_non_steady_state(conc, t_var, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=True, rfile=\(aq\(aq, del_coef=10)
This function returns covariance trajectoy based on LNA
.INDENT 7.0
.TP
.B Args:
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
t_var (list): time stamp of trajectories
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
molar : True if conc. is in molar otherwise False
rfile (str): file name of BioSANS topology file.
del_coef (float, optional): factor for modifying time steps used
.INDENT 7.0
.INDENT 3.5
in the integration/propagation of ODE. Defaults to 10.
.UNINDENT
.UNINDENT
.TP
.B Returns:
list: [covariance, labels, time]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.lna_function_of_time.lna_non_steady_state2(conc, t_var, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=True, rfile=\(aq\(aq, del_coef=10)
This function returns Fan\-factor trajectoy based on LNA
.INDENT 7.0
.TP
.B Args:
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
t_var (list): time stamp of trajectories
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
molar : True if conc. is in molar otherwise False
rfile (str): file name of BioSANS topology file.
del_coef (float, optional): factor for modifying time steps used
.INDENT 7.0
.INDENT 3.5
in the integration/propagation of ODE. Defaults to 10.
.UNINDENT
.UNINDENT
.TP
.B Returns:
list: [fanp_factor, labels, time]
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.deterministic.ode_int\fP
.INDENT 0.0
.INDENT 3.5
This module in the ode_int module
.UNINDENT
.UNINDENT
.sp
This module uses the odeint integrator in python to propagate ODE trajec
tory.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%ode_model\fP(zlist, tvar, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False)
T}	T{
This function returns dx/dt where x are the components or species
T}
_
T{
\fI\%ode_int\fP(conc, tvar, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False, rfile=\(aq\(aq)
T}	T{
This function returns the inetegration result of odeint
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.ode_int.ode_model(zlist, tvar, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False)
This function returns dx/dt where x are the components or species
and t is time.
.INDENT 7.0
.TP
.B Args:
zlist (list): list of components or species amounts
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
molar : True if conc. is in molar else False
.TP
.B Returns:
np.ndarray: dx/dt where x are the components and t is time
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.ode_int.ode_int(conc, tvar, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False, rfile=\(aq\(aq)
This function returns the inetegration result of odeint
.INDENT 7.0
.TP
.B Args:
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stoch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B stoch_var = np.array([
[   \-1,           0    ]            # species A
[    1,          \-1    ]            # species B
[    0,           1    ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B molar (bool, optional): If True, the units for any amount is in
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.sp
rfile (str): file name of BioSANS topology file.
.TP
.B Returns:
np.ndarray: trajectories
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.deterministic.runge_kutta4\fP
.INDENT 0.0
.INDENT 3.5
This module is the runge_kutta4 module
.UNINDENT
.UNINDENT
.sp
This module serves in the integration of ODE trajectory using RK4 and
tau\-adaptive RK4\-algorithm.
.sp
The list of functions in this module are
.INDENT 0.0
.IP 1. 3
rk4_model
.IP 2. 3
runge_kutta_forth
.UNINDENT
.sp
3. rungek4_int
rkck
rkqs
rungek4a_int
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%rk4_model\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, molar=False)
T}	T{
This function returns  the evaluated  value of the  derivative of
T}
_
T{
\fI\%runge_kutta_forth\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, delt, n_sp, molar=False)
T}	T{
this function prepare some stuffs for the integration
T}
_
T{
\fI\%rungek4_int\fP(conc, time, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False, delx=1, rfile=\(aq\(aq)
T}	T{
Peforms the RK4 integration
T}
_
T{
\fI\%rkck\fP(hvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, n_sp, molar)
T}	T{
This function is a helper function for tau\-adaptive RK4
T}
_
T{
\fI\%rkqs\fP(htry, eps, yscal, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, n_sp, molar)
T}	T{
This function is a helper function for tau\-adaptive RK4
T}
_
T{
\fI\%rungek4a_int\fP(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, yscal=10, molar=False, implicit=False, rfile=\(aq\(aq)
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.runge_kutta4.rk4_model(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, molar=False)
This function returns  the evaluated  value of the  derivative of
each component with respwct to time at a particular instant based on
the state of the system at that instant.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ksn_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stoch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B stoch_var = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
molar (bool, optional): If True, the units for any amount is in
.INDENT 7.0
.INDENT 3.5
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.UNINDENT
.TP
.B Returns:
np.ndarray: value of dx/dt
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.runge_kutta4.runge_kutta_forth(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, delt, n_sp, molar=False)
this function prepare some stuffs for the integration
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc ([type]): [description]
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
v_stoich (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
delt (float): step size
n_sp (dict): dictionary of keywords
molar (bool, optional): If True, the units for any amount is in
.INDENT 7.0
.INDENT 3.5
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.UNINDENT
.TP
.B Returns:
list: [updated concn, updated time]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.runge_kutta4.rungek4_int(conc, time, sp_comp, ks_dict, r_dict, p_dict, stch_var, molar=False, delx=1, rfile=\(aq\(aq)
Peforms the RK4 integration
.INDENT 7.0
.TP
.B Args:
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B molar (bool, optional): If True, the units for any amount is in
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.sp
delx (float, optional): stepsize modifier. Defaults to 1.
rfile (string, optional): name of topology file where some
.INDENT 7.0
.INDENT 3.5
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.UNINDENT
.TP
.B Returns:
list: [time stamp, trajectory]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.runge_kutta4.rkck(hvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, n_sp, molar)
This function is a helper function for tau\-adaptive RK4
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.runge_kutta4.rkqs(htry, eps, yscal, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, tvar, n_sp, molar)
This function is a helper function for tau\-adaptive RK4
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.deterministic.runge_kutta4.rungek4a_int(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, yscal=10, molar=False, implicit=False, rfile=\(aq\(aq)
[summary]
.INDENT 7.0
.TP
.B Args:
tvar (list): time stamp of trajectories i.e. [0, 0.1, 0.2, ...]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
yscal (int, optional): [description]. Defaults to 10.
molar (bool, optional): If True, the units for any amount is in
.INDENT 7.0
.INDENT 3.5
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.TP
.B Returns:
list: [time stamp, trajectory]
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.stochastic\fP
.SS Submodules
.SS \fI\%BioSANS2020.propagation.stochastic.gillespie_ssa\fP
.INDENT 0.0
.INDENT 3.5
This module is the gillespie_ssa module
.UNINDENT
.UNINDENT
.sp
This module propagates the stochastic simulation algorithm also known as
Gillespie.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%gillespie_ssa\fP(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, implicit=False, rfile=\(aq\(aq)
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.gillespie_ssa.gillespie_ssa(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, implicit=False, rfile=\(aq\(aq)
[summary]
.INDENT 7.0
.TP
.B Args:
tvar (list): time stamp of simulation
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B rand_seed (float): random  seed value picked  at random for each
trajectory. They have been sampled from the calling program.
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.TP
.B Returns:
tuple: (time, trajectories)
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.stochastic.mystiffcle\fP
.INDENT 0.0
.INDENT 3.5
This module is the mystiffcle module
.UNINDENT
.UNINDENT
.sp
This can propagate non\-stiff to moderately stiff stochastic simulation
using the chemical langevine equation. Here two versions are provided
.INDENT 0.0
.IP 1. 3
Tau\-adaptive CLE
.IP 2. 3
Fix\-inreval CLE
.UNINDENT
.sp
The following are the list of function for this module.
.INDENT 0.0
.IP 1. 3
cle_model
.IP 2. 3
cle_calculate
.IP 3. 3
cle2_calculate
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%cle_model\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, dtime, del_coef, reg=False)
T}	T{
This functions prepare the CLE model for integration
T}
_
T{
\fI\%cle_calculate\fP(tvar, sp_comp, ks_dict, sconc, r_dict, p_dict, stch_var, del_coef=10, rand_seed=1, implicit=False, rfile=\(aq\(aq)
T}	T{
This functions performs the tau\-adaptive CLE integration
T}
_
T{
\fI\%cle2_calculate\fP(tvar, sp_comp, ks_dict, sconc, r_dict, p_dict, stch_var, del_coef=1, rand_seed=1, rfile=\(aq\(aq)
T}	T{
This functions performs the fix\-interval CLE integration
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.mystiffcle.cle_model(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, dtime, del_coef, reg=False)
This functions prepare the CLE model for integration
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
dtime (float): step\-size
del_coef (float): step\-size factor or modifier
reg (bool, optional): If True, the model is for fix\-interval CLE
.INDENT 7.0
.INDENT 3.5
\&. Defaults to False.
.UNINDENT
.UNINDENT
.TP
.B Returns:
np.ndarray: f_d = fofx * dtime + gofx * sqdt
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.mystiffcle.cle_calculate(tvar, sp_comp, ks_dict, sconc, r_dict, p_dict, stch_var, del_coef=10, rand_seed=1, implicit=False, rfile=\(aq\(aq)
This functions performs the tau\-adaptive CLE integration
Args:
.INDENT 7.0
.INDENT 3.5
tvar (list): time stamp of simulation
sp_comp (dict): dictionary of appearance or position of species
.INDENT 0.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
sconc (dict): dictionary of initial concentration.
.INDENT 0.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
del_coef (float): step\-size factor or modifier
rand_seed (float): random  seed value picked  at random for each
.INDENT 0.0
.INDENT 3.5
trajectory. They have been sampled from the calling program.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
tuple: (time, trajectories)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.mystiffcle.cle2_calculate(tvar, sp_comp, ks_dict, sconc, r_dict, p_dict, stch_var, del_coef=1, rand_seed=1, rfile=\(aq\(aq)
This functions performs the fix\-interval CLE integration
Args:
.INDENT 7.0
.INDENT 3.5
tvar (list): time stamp of simulation
sp_comp (dict): dictionary of appearance or position of species
.INDENT 0.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
sconc (dict): dictionary of initial concentration.
.INDENT 0.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
del_coef (float): step\-size factor or modifier
rand_seed (float): random  seed value picked  at random for each
.INDENT 0.0
.INDENT 3.5
trajectory. They have been sampled from the calling program.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
tuple: (time, trajectories)
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.stochastic.mytauleap\fP
.INDENT 0.0
.INDENT 3.5
This module is the mytauleap module
.UNINDENT
.UNINDENT
.sp
The purpose of this module is to propagate stochastic trajectories using
the tau\-leaping algorithm.
.sp
The functions in this module are the following;
.sp
1. sim_tauLeap
2.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%sim_tauLeap\fP(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, del_coef, implicit=False, rfile=\(aq\(aq)
T}	T{
This functions performs the tau\-leaping integration
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.mytauleap.sim_tauLeap(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, del_coef, implicit=False, rfile=\(aq\(aq)
This functions performs the tau\-leaping integration
.INDENT 7.0
.TP
.B Args:
tvar ([type]): [description]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
rand_seed ([type]): [description]
rand_seed (float): random  seed value picked  at random for each
.INDENT 7.0
.INDENT 3.5
trajectory. They have been sampled from the calling program.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.TP
.B Returns:
tuple : (time, trajectories)
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.stochastic.tau_leaping\fP
.INDENT 0.0
.INDENT 3.5
This module is the tau_leaping module
.UNINDENT
.UNINDENT
.sp
The purpose of this module is to propagate stochastic trajectories using
the tau\-leaping algorithm.
.sp
The functions in this module are the following;
.INDENT 0.0
.IP 1. 3
tau_leaping
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%tau_leaping\fP(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, del_coef, implicit=False, rfile=\(aq\(aq)
T}	T{
This functions performs the tau\-leaping integration
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.tau_leaping.tau_leaping(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, del_coef, implicit=False, rfile=\(aq\(aq)
This functions performs the tau\-leaping integration
.INDENT 7.0
.TP
.B Args:
tvar ([type]): [description]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
rand_seed ([type]): [description]
rand_seed (float): random  seed value picked  at random for each
.INDENT 7.0
.INDENT 3.5
trajectory. They have been sampled from the calling program.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.TP
.B Returns:
tuple : (time, trajectories)
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.stochastic.tau_leaping2\fP
.INDENT 0.0
.INDENT 3.5
This module is the tau_leaping2 module
.UNINDENT
.UNINDENT
.sp
The purpose of this module is to propagate stochastic trajectories using
the tau\-leaping algorithm.
.sp
The functions in this module are the following;
.INDENT 0.0
.IP 1. 3
tau_leaping2
.IP 2. 3
step_3to5
.IP 3. 3
ssa_support
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%tau_leaping2\fP(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, del_coef=1, implicit=False, rfile=\(aq\(aq)
T}	T{
This functions performs the tau\-leaping integration
T}
_
T{
\fI\%step_3to5\fP(prop_flux, lcri, dt1)
T}	T{
Additional steps in tau\-leaping2
T}
_
T{
\fI\%ssa_support\fP(tvar, ks_dict, r_dict, p_dict, stch_var, rfile=\(aq\(aq, tindex=0, index=0, t_c=0, z_conc=[], spc=None, spc2=None, concz=None, yconc=None, update_sp=None)
T}	T{
SSA steps of tau\-leaping2
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.tau_leaping2.tau_leaping2(tvar, sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, rand_seed, del_coef=1, implicit=False, rfile=\(aq\(aq)
This functions performs the tau\-leaping integration
.INDENT 7.0
.TP
.B Args:
tvar ([type]): [description]
sp_comp (dict): dictionary of appearance or position of species
.INDENT 7.0
.INDENT 3.5
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 0.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 0.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
rand_seed ([type]): [description]
rand_seed (float): random  seed value picked  at random for each
.INDENT 7.0
.INDENT 3.5
trajectory. They have been sampled from the calling program.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B implicit (bool, optional): True means report in time intervals
similar to the input time intervals even if actual step is
more or less. Defaults to False.
.TP
.B rfile (string, optional): name of topology file where some
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.TP
.B Returns:
tuple : (time, trajectories)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.tau_leaping2.step_3to5(prop_flux, lcri, dt1)
Additional steps in tau\-leaping2
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.stochastic.tau_leaping2.ssa_support(tvar, ks_dict, r_dict, p_dict, stch_var, rfile=\(aq\(aq, tindex=0, index=0, t_c=0, z_conc=[], spc=None, spc2=None, concz=None, yconc=None, update_sp=None)
SSA steps of tau\-leaping2
.UNINDENT
.SS \fI\%BioSANS2020.propagation.symbolic\fP
.SS Submodules
.SS \fI\%BioSANS2020.propagation.symbolic.analytical_sol\fP
.INDENT 0.0
.INDENT 3.5
This module is the analytical_sol module
.UNINDENT
.UNINDENT
.sp
This module handles analytical expression derivation
.sp
The following are the functions in this module
.INDENT 0.0
.IP 1. 3
solve_with_timeout
.IP 2. 3
get_sets
.IP 3. 3
grab_steady_state
.IP 4. 3
cs_to_csr
.IP 5. 3
analyt_soln
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%solve_with_timeout\fP(f_e, j_s)
T}	T{
resturn solution to the system of equation in f_e with variables
T}
_
T{
\fI\%get_sets\fP(r_dict, p_dict)
T}	T{
[summary]
T}
_
T{
\fI\%grab_steady_state\fP(r_dict, p_dict, c_s, c_so, da_dt, j_s)
T}	T{
This function return steady state amounts of components
T}
_
T{
\fI\%cs_to_csr\fP(f_x, c_s, cs_r, not_semi)
T}	T{
[summary]
T}
_
T{
\fI\%analyt_soln\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, rfile=\(aq\(aq, not_semi=True, mode=None)
T}	T{
This function finds an analytical solution to a system of ODE.
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.symbolic.analytical_sol.solve_with_timeout(f_e, j_s)
resturn solution to the system of equation in f_e with variables
symbos in the list j_s
.INDENT 7.0
.TP
.B Args:
f_e (list): equations
j_s (list): Symbols
.TP
.B Returns:
dict: sometimes list but normally {variable : value}
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.symbolic.analytical_sol.get_sets(r_dict, p_dict)
[summary]
.INDENT 7.0
.TP
.B Args:
r_dict (dict): dictionary of reactants
p_dict (dict): dictionary of products
.TP
.B Returns:
set: sets to sum that will be used as constraints
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.symbolic.analytical_sol.grab_steady_state(r_dict, p_dict, c_s, c_so, da_dt, j_s)
This function return steady state amounts of components
.INDENT 7.0
.TP
.B Args:
r_dict (dict): reactants dictionary
p_dict (dict): products dictionary
c_s (dict): dictionary of concentration Symbols/values
c_so (dict): dictionary of initial concentration Symbols/values
da_dt ([type]): ode expression
j_s ([type]): list of components
.TP
.B Returns:
Matrix: steady state result
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.symbolic.analytical_sol.cs_to_csr(f_x, c_s, cs_r, not_semi)
[summary]
.INDENT 7.0
.TP
.B Args:
f_x (expression): sympy expression
c_s (Symbol): sympy symbols
cs_r (Symbol): equivalent of c_s
not_semi (boolean): if True, use pure symbolic
.TP
.B Returns:
expression: substituted expression
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.symbolic.analytical_sol.analyt_soln(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, rfile=\(aq\(aq, not_semi=True, mode=None)
This function finds an analytical solution to a system of ODE.
.INDENT 7.0
.TP
.B Args:
sp_comp (dict): dictionary of components
ks_dict (dict):  dictionary of rate constant
conc (dict): dictionary of concentrations
r_dict (dict): dictionary of reactants
p_dict (dict): dictionary of products
stch_var (Matrix): stoichiomentric matrix
items (tuple, optional): (canvas, scroll_x, scrolly).
rfile (str, optional): BioSANS topology file.
not_semi (bool, optional): if True, use pure symbolic solution;
.INDENT 7.0
.INDENT 3.5
which is a function of time, initial concentration, and
rate constant. Defaults to True.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B mode (str, optional): mode of computation;
.INDENT 7.0
.INDENT 3.5
ftxo \- function of time and initial condition
ftks \- function of time and rate constant
.UNINDENT
.UNINDENT
.sp
Defaults to None.
.UNINDENT
.TP
.B Returns:
dict: dictionary of solution
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.symbolic.lna_approx2\fP
.INDENT 0.0
.INDENT 3.5
This module is the lna_approx2 module
.UNINDENT
.UNINDENT
.sp
This module handles symbolic linear noise approximation.
.sp
The following are the list of function in this module;
.INDENT 0.0
.IP 1. 3
subs2
.IP 2. 3
lna_symbolic2
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%subs2\fP(zvar, cval)
T}	T{
This function helps in the substitution of value to sympy Symbols
T}
_
T{
\fI\%lna_symbolic2\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, molar=False, mode=None)
T}	T{
This function facilitates in the symbolic LNA computation.
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.symbolic.lna_approx2.subs2(zvar, cval)
This function helps in the substitution of value to sympy Symbols
.INDENT 7.0
.TP
.B Args:
zvar (Symbol): sympy expression
cval (dict): dictionary of values
.TP
.B Returns:
(Symbol): substituted expression
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.symbolic.lna_approx2.lna_symbolic2(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, molar=False, mode=None)
This function facilitates in the symbolic LNA computation.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, kf1
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc ([type]): [description]
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
items (list): list of [canvas, scroll_x, scroll_y]
molar (bool, optional): If True, the units for any amount is in
.INDENT 7.0
.INDENT 3.5
molar. Propensity will be macroscopic. Defaults to False.
.UNINDENT
.UNINDENT
.sp
mode (str, optional): method keywords : Numeric, fofks, fofCo
.TP
.B Returns:
list: [0, 0] \- not used
.UNINDENT
.UNINDENT
.SS Submodules
.SS \fI\%BioSANS2020.propagation.create_wxmaxima_command\fP
.INDENT 0.0
.INDENT 3.5
This module is the create_wxmaxima_command module
.UNINDENT
.UNINDENT
.sp
This module attempts to transforms topology file into wxmaxima ODE input
that a user can copy and paste into wxmaxima to grab a symbolic solution
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%prepare_ffrrint\fP(items)
T}	T{
This function instantiate how the output will be printed by crea\-
T}
_
T{
\fI\%prepare_dict1\fP(sp_comp)
T}	T{
This function prepares cs_var, cso_var, time
T}
_
T{
\fI\%prepare_list1\fP(ks_dict)
T}	T{
This function prepares a list of symbol for rate constant
T}
_
T{
\fI\%prepare_list2\fP(stch_var, slabels)
T}	T{
This function prepares two list from stoichiometric matrix
T}
_
T{
\fI\%for_wxmaxima\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, rfile=\(aq\(aq)
T}	T{
This function  transforms topology file  into wxmaxima  ODE input
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.create_wxmaxima_command.prepare_ffrrint(items)
This function instantiate how the output will be printed by crea\-
thing the function ffprint
.INDENT 7.0
.TP
.B Args:
text (Text): text area where the outputs are written
items (tuple): 3 item list of (canvas, scroll_x, scroll_y)
.TP
.B Returns:
function: either print in console or in text area
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.create_wxmaxima_command.prepare_dict1(sp_comp)
This function prepares cs_var, cso_var, time
.INDENT 7.0
.TP
.B Args:
sp_comp (dict): dictionary of components position in reaction
.TP
.B Returns:
multitype: cs_var, cso_var, time
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.create_wxmaxima_command.prepare_list1(ks_dict)
This function prepares a list of symbol for rate constant
.INDENT 7.0
.TP
.B Args:
ks_dict (dict): dictionary of rate constant positions
.TP
.B Returns:
list: rate constants symbols
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.create_wxmaxima_command.prepare_list2(stch_var, slabels)
This function prepares two list from stoichiometric matrix
.INDENT 7.0
.TP
.B Args:
stch_var (np.ndarray): toichiometric matrix
.TP
.B Returns:
.INDENT 7.0
.TP
.B list: [non zero row values of  stch_var,
nonzero rows index of stch_var]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.create_wxmaxima_command.for_wxmaxima(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, rfile=\(aq\(aq)
This function  transforms topology file  into wxmaxima  ODE input
that a user can copy and paste into wxmaxima to grab a symbolic
solution.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ks_dict (dict): dictionary of rate constant that appears in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (numpy.ndarray): stoichiometric matrix. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B v_stoich = np.array([
[   \-1,           0   ]            # species A
[    1,          \-1   ]            # species B
[    0,           1   ]            # species C
.INDENT 7.0
.INDENT 3.5
#1st rxn    2nd rxn
.UNINDENT
.UNINDENT
.UNINDENT
.sp
])
.UNINDENT
.UNINDENT
.sp
items (list): list of [canvas, scroll_x, scroll_y]
rfile (string, optional): name of topology file where some
.INDENT 7.0
.INDENT 3.5
parameters or components are negative indicating  they  have
to be estimated. Defaults to None.
.UNINDENT
.UNINDENT
.TP
.B Returns:
list: [0, 0] \- contains nothing
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.law_of_localization\fP
.INDENT 0.0
.INDENT 3.5
This module is the law_of_localization module
.UNINDENT
.UNINDENT
.sp
The sole purpose of this module is to implement the law of localization
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%subs2\fP(zvar, cval)
T}	T{
This function substitute actual values to sympy symbols.
T}
_
T{
\fI\%prepare_ffrrint\fP(items)
T}	T{
This function instantiate how the output will be printed by crea\-
T}
_
T{
\fI\%prepare_dict_list1\fP(sp_comp, conc, ks_dict)
T}	T{
This function prepares cs_var, cso_var, time
T}
_
T{
\fI\%prepare_list2\fP(stch_var, slabels)
T}	T{
This function prepares two list from stoichiometric matrix
T}
_
T{
\fI\%law_loc_symbolic\fP(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, molar=False, mode=None, numer=False)
T}	T{
[summary]
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.law_of_localization.subs2(zvar, cval)
This function substitute actual values to sympy symbols.
.INDENT 7.0
.TP
.B Args:
zvar (sympy.core): sympy expression
cval (disct): dictionary of Symbols : value
.TP
.B Returns:
(sympy.core): substituted expression
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.law_of_localization.prepare_ffrrint(items)
This function instantiate how the output will be printed by crea\-
thing the function ffprint
.INDENT 7.0
.TP
.B Args:
text (Text): text area where the outputs are written
items (tuple): 3 item list of (canvas, scroll_x, scroll_y)
.TP
.B Returns:
function: either print in console or in text area
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.law_of_localization.prepare_dict_list1(sp_comp, conc, ks_dict)
This function prepares cs_var, cso_var, time
.INDENT 7.0
.TP
.B Args:
sp_comp (dict): dictionary of components position in reaction
conc (dict) : dictionary of initail concentration
.TP
.B Returns:
(dict/list): cs_var, cso_var, equivals, equi_ks
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.law_of_localization.prepare_list2(stch_var, slabels)
This function prepares two list from stoichiometric matrix
.INDENT 7.0
.TP
.B Args:
stch_var (np.ndarray): toichiometric matrix
.TP
.B Returns:
.INDENT 7.0
.TP
.B list: [non zero row values of  stch_var,
nonzero rows index of stch_var]
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.law_of_localization.law_loc_symbolic(sp_comp, ks_dict, conc, r_dict, p_dict, stch_var, items=None, molar=False, mode=None, numer=False)
[summary]
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B sp_comp (dict): dictionary of appearance or position of species
or component in the reaction tag of BioSANS topology file.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B, \-kf1    # negative means to be estimated
B => C, kf2
.UNINDENT
.UNINDENT
.sp
The value of sp_comp is
.INDENT 7.0
.INDENT 3.5
sp_comp = {\(aqA\(aq: {0}, \(aqB\(aq: {0, 1}, \(aqC\(aq: {1}}
.sp
A appears in first reaction with index 0
B appears in first and second reaction with index 0, 1
C appears in second reaction with index 1
.UNINDENT
.UNINDENT
.TP
.B ks_dict (dict): dictionary of rate constant that appear in each
reactions.
.sp
For example;
.INDENT 7.0
.INDENT 3.5
#REACTIONS
A => B , 0.3        # first reaction
B <=> C, 0.1, 0.2   # second reaction
.UNINDENT
.UNINDENT
.sp
The value of ks_dict is
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B ks_dict = {
0 : [0.3],      # first reaction
1 : [0.1, 0.2]  # second reaction
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.UNINDENT
.sp
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
r_dict (dict): dictionary of reactant stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B r_dict = {
0: {\(aqA\(aq: 1},  # first reaction, coefficient of A is 1
1: {\(aqB\(aq: 1}   # second reaction, coefficient of B is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
p_dict (dict): dictionary of product stoichiometry. For example
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B p_dict = {
0: {\(aqB\(aq: 1},  # first reaction, coefficient of B is 1
1: {\(aqC\(aq: 1}   # second reaction, coefficient of C is 1
.UNINDENT
.sp
}
.UNINDENT
.UNINDENT
.sp
stch_var (np.ndarray): stoichiometric matrix
items (tuple): 3 item list of (canvas, scroll_x, scroll_y)
molar (bool, optional): [description]. Defaults to False.
mode (str, optional): either "Numeric", "fofks", "fofCo".
numer (bool, optional): If True, numeric substitution will be
.INDENT 7.0
.INDENT 3.5
done. Defaults to False.
.UNINDENT
.UNINDENT
.TP
.B Returns:
list: [0, 0] \- useless return
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.propensity\fP
.INDENT 0.0
.INDENT 3.5
This is the propensity module
.UNINDENT
.UNINDENT
.sp
This module prepares the propensity vector or fluxes vector
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%propensity_vec\fP(ks_dict, conc, r_dict, p_dict, odeint=False)
T}	T{
Returns propensity vector using microscopic equations
T}
_
T{
\fI\%propensity_vec_molar\fP(ks_dict, conc, r_dict, p_dict, odeint=False)
T}	T{
Returns propensity vector using macroscopic equations
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.propensity.propensity_vec(ks_dict, conc, r_dict, p_dict, odeint=False)
Returns propensity vector using microscopic equations
.INDENT 7.0
.TP
.B Args:
ks_dict (dict): check details in process module
conc (dict): check details in process module
r_dict (dict): check details in process module
p_dict (dict): check details in process module
odeint (bool, optional): [description]. Defaults to False.
.TP
.B Returns:
np.ndarray: propensity vector
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.propensity.propensity_vec_molar(ks_dict, conc, r_dict, p_dict, odeint=False)
Returns propensity vector using macroscopic equations
.INDENT 7.0
.TP
.B Args:
ks_dict (dict): check details in process module
conc (dict): check details in process module
r_dict (dict): check details in process module
p_dict (dict): check details in process module
odeint (bool, optional): [description]. Defaults to False.
.TP
.B Returns:
np.ndarray: propensity vector
.UNINDENT
.UNINDENT
.SS \fI\%BioSANS2020.propagation.recalculate_globals\fP
.INDENT 0.0
.INDENT 3.5
This module is the recalculate_globals module
.UNINDENT
.UNINDENT
.sp
The purpose of this module is to ensure that global variables holds True
each process for multitrajectory simulation.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%eval2\fP(to_eval)
T}	T{
Evaluate a string expression using the SBML_FUNCT_DICT dictionary
T}
_
T{
\fI\%rate_of\fP(xvar)
T}	T{
This is to supplement the SBML rateOf function. The return is the
T}
_
T{
\fI\%delay_part1\fP(yvar, last)
T}	T{
Part of the delay function. See delay function for details
T}
_
T{
\fI\%delay_part2\fP(last, delt, yvar)
T}	T{
Part of the delay function. See delay function for details
T}
_
T{
\fI\%delay\fP(xvar, yvar)
T}	T{
This is to supplement the SBML delay function
T}
_
T{
\fI\%none_to_list\fP(xvar=None)
T}	T{
Transform a None variable into a list [] to avoid dangerous
T}
_
T{
\fI\%apply_rules\fP(conc, yconc, oras=None, spconc=None, slabels=None)
T}	T{
This function modifies the concentration base on the rules stated
T}
_
T{
\fI\%get_globals\fP(rfile)
T}	T{
This function get the global variables from BioSANS topology file
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%reserve_events_words\fP
T}	T{
T}
_
T{
\fI\%CONCP\fP
T}	T{
T}
_
T{
\fI\%RATESP\fP
T}	T{
T}
_
T{
\fI\%ORASP\fP
T}	T{
T}
_
T{
\fI\%SIP\fP
T}	T{
T}
_
T{
\fI\%ACTUALSP\fP
T}	T{
T}
_
T{
\fI\%CONCP2\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.reserve_events_words
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.CONCP
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.RATESP
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.ORASP
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.SIP
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.ACTUALSP
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.CONCP2
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.eval2(to_eval)
Evaluate a string expression using the SBML_FUNCT_DICT dictionary
.INDENT 7.0
.TP
.B Args:
to_eval (str): expression
.TP
.B Returns:
multitype: evaluated result
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.rate_of(xvar)
This is to supplement the SBML rateOf function. The return is the
instantaneous rate at the current state of the system
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.delay_part1(yvar, last)
Part of the delay function. See delay function for details
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.delay_part2(last, delt, yvar)
Part of the delay function. See delay function for details
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.delay(xvar, yvar)
This is to supplement the SBML delay function
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.none_to_list(xvar=None)
Transform a None variable into a list [] to avoid dangerous
initial values.
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.apply_rules(conc, yconc, oras=None, spconc=None, slabels=None)
This function modifies the concentration base on the rules stated
in BioSANS topology file.
.INDENT 7.0
.TP
.B Args:
conc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
yconc (dict): dictionary of initial concentration.
.INDENT 7.0
.INDENT 3.5
For example;
.INDENT 0.0
.INDENT 3.5
{\(aqA\(aq: 100.0, \(aqB\(aq: \-1.0, \(aqC\(aq: 0.0}
negative means unknown or for estimation
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
oras (float, optional): current time point. Defaults to None.
spconc (list, optional): values of conc at the current time.
.INDENT 7.0
.INDENT 3.5
Defaults to None.
.UNINDENT
.UNINDENT
.sp
slabels (list, optional): names of components. Defaults to None.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.propagation.recalculate_globals.get_globals(rfile)
.INDENT 7.0
.TP
.B This function get the global variables from BioSANS topology file
called rfile.
.TP
.B Args:
rfile (str): name of topology file
.UNINDENT
.UNINDENT
.SS Submodules
.SS \fI\%BioSANS2020.BioSANS\fP
.INDENT 0.0
.INDENT 3.5
This module is the BioSANS module
.UNINDENT
.UNINDENT
.sp
The purpose of this module  is to provide a graphical user interface and
to facilitate  the transfer of information from BioSANS topology file to
other modules.
.sp
The following are the list of functions in this module
.INDENT 0.0
.IP 1. 4
load_data
.IP 2. 4
show_file_dir
.IP 3. 4
create_file
.IP 4. 4
extract_ode
.IP 5. 4
sbml_to_topo2
.IP 6. 4
save_file
.IP 7. 4
runpy_file
.IP 8. 4
run_ssl
.IP 9. 4
load_data2
.IP 10. 4
tload_data2
.IP 11. 4
delete_this
.IP 12. 4
canvas_update_widgets
.IP 13. 4
load_image
.IP 14. 4
eval2
.IP 15. 4
dict_trans
.IP 16. 4
convert
.IP 17. 4
range_trans
.IP 18. 4
range_prep
.IP 19. 4
mrun_propagation
.IP 20. 4
tprocess
.IP 21. 4
analysis_case
.IP 22. 4
plot_traj_d2
.IP 23. 4
param_set
.UNINDENT
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%load_data\fP(itups)
T}	T{
This fuction reads topology file and display the contents in a
T}
_
T{
\fI\%show_file_dir\fP(path)
T}	T{
This function opens the current working directory
T}
_
T{
\fI\%create_file\fP(itups, ftype)
T}	T{
This function creates a temporary file in a temporary directory
T}
_
T{
\fI\%extract_ode\fP(itups)
T}	T{
This function extracts topology from ODE file format
T}
_
T{
\fI\%sbml_to_topo2\fP(tocon, itups)
T}	T{
This function helps  in the conversion  of SBML files  to BioSANS
T}
_
T{
\fI\%save_file\fP()
T}	T{
This function saves the content of the last opened text area into
T}
_
T{
\fI\%runpy_file\fP()
T}	T{
This module write the contents of the text area into a python
T}
_
T{
\fI\%run_ssl\fP()
T}	T{
This function initiates BioSSL or the BioSABS structured
T}
_
T{
\fI\%load_data2\fP(plot=False)
T}	T{
This function loads data for numerical processing or for plotting
T}
_
T{
\fI\%tload_data2\fP(plot=False)
T}	T{
This function starts a thread that handles loading data.
T}
_
T{
\fI\%delete_this\fP(frame, canvas)
T}	T{
This function delete an object in the canvas
T}
_
T{
\fI\%canvas_update_widgets\fP(_, canvas)
T}	T{
This function rearranged the elements in the canvas.
T}
_
T{
\fI\%load_image\fP(wdata=False)
T}	T{
This function load image into a canvas and display in BioSANS.
T}
_
T{
\fI\%eval2\fP(xvar)
T}	T{
This function evaluates expression
T}
_
T{
\fI\%dict_trans\fP(x_1)
T}	T{
This function creates a dictionary from a list assignment
T}
_
T{
\fI\%convert\fP(xvar, con)
T}	T{
This function converts a variable into con data type.
T}
_
T{
\fI\%range_trans\fP(x_1)
T}	T{
This function converts the x_1 comma concatenated string into a
T}
_
T{
\fI\%range_prep\fP(x_1)
T}	T{
This function process some string input and converts them to a
T}
_
T{
\fI\%mrun_propagation\fP(par, entry_list, defs2)
T}	T{
Ths function grabs the values from defs2 whcih serves as the set
T}
_
T{
\fI\%tprocess\fP(defs)
T}	T{
This function creates a thread and sed defs to the
T}
_
T{
\fI\%analysis_case\fP(ana_case, itups)
T}	T{
This function  redirects input to  the corresponding numerical or
T}
_
T{
\fI\%plot_traj_d\fP(current_data, itups)
T}	T{
This function plot the trajectory data stored as current data.
T}
_
T{
\fI\%get_checked\fP(el_1, slabels)
T}	T{
This function returns the components name with a check from el_1
T}
_
T{
\fI\%plot_traj_d2\fP(current_data, itups)
T}	T{
This function is another plotting function.
T}
_
T{
\fI\%param_set\fP(method)
T}	T{
This function opens the parameter setting dialof box and grab the
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%TEMPORARY_FOLDER\fP
T}	T{
T}
_
T{
\fI\%TOP\fP
T}	T{
T}
_
T{
\fI\%HEADER\fP
T}	T{
T}
_
T{
\fI\%FRAME\fP
T}	T{
T}
_
T{
\fI\%FOOTER\fP
T}	T{
T}
_
T{
\fI\%FILE_NAME\fP
T}	T{
T}
_
T{
\fI\%CURRENT_DATA\fP
T}	T{
T}
_
T{
\fI\%SUPER_THREAD_RUN\fP
T}	T{
T}
_
T{
\fI\%MENUBUT1\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.TEMPORARY_FOLDER
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.TOP
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.HEADER
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.FRAME
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.FOOTER
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.FILE_NAME
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.load_data(itups)
This fuction reads topology file and display the contents in a
text area.
.INDENT 7.0
.TP
.B Args:
itups (tuple): (canvas, scroll_x, scroll_y)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.show_file_dir(path)
This function opens the current working directory
.INDENT 7.0
.TP
.B Args:
path (str): directory path
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.create_file(itups, ftype)
This function creates a temporary file in a temporary directory
where new topology / files can be placed.
.INDENT 7.0
.TP
.B Args:
itups (tuple): (canvas, scroll_x, scroll_y)
ftype (int): 1 for BioSANS topology file, 2 for ODE file
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.extract_ode(itups)
This function extracts topology from ODE file format
.INDENT 7.0
.TP
.B Args:
itups (tuple): (canvas, scroll_x, scroll_y)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.sbml_to_topo2(tocon, itups)
This function helps  in the conversion  of SBML files  to BioSANS
topology files.
.INDENT 7.0
.TP
.B Args:
tocon (str): sbml file name to convert
itups (tuple): (canvas, scroll_x, scroll_y)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.save_file()
This function saves the content of the last opened text area into
a file.
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.runpy_file()
This module write the contents of the text area into a python
file and run the file as a python script.
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.run_ssl()
This function initiates BioSSL or the BioSABS structured
simulation language.
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.load_data2(plot=False)
This function loads data for numerical processing or for plotting
.INDENT 7.0
.TP
.B Args:
plot (bool, optional): if True, loaded trajectory is plotted.
Defaults to False.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.tload_data2(plot=False)
This function starts a thread that handles loading data.
.INDENT 7.0
.TP
.B Args:
plot (bool, optional): if True, loaded trajectory is plotted.
Defaults to False.
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.delete_this(frame, canvas)
This function delete an object in the canvas
.INDENT 7.0
.TP
.B Args:
frame (tkinter.Frame): frame or other objects
canvas (tkinter.Canvas): canvas object
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.canvas_update_widgets(_, canvas)
This function rearranged the elements in the canvas.
.INDENT 7.0
.TP
.B Args:
_ (None): Not needed
canvas (tkinter.Canvas): canvas object]
.TP
.B Returns:
str: "break"
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.load_image(wdata=False)
This function load image into a canvas and display in BioSANS.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B wdata (bool, optional): if True, data will also be loaded in the
memory. Defaults to False.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.eval2(xvar)
This function evaluates expression
.INDENT 7.0
.TP
.B Args:
xvar (str): expression
.TP
.B Returns:
str: evaluated expression
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.CURRENT_DATA
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.dict_trans(x_1)
This function creates a dictionary from a list assignment
Args:
.INDENT 7.0
.INDENT 3.5
x_1 (str): string of symbols and assinged values.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Returns:
dict: a dictionary from a list assignment
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.convert(xvar, con)
This function converts a variable into con data type.
.INDENT 7.0
.TP
.B Args:
xvar (str): string
con (con): new data type con
.TP
.B Returns:
con: xvar equivalent in con
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.range_trans(x_1)
This function converts the x_1 comma concatenated string into a
list and put the first element as the last element.
.INDENT 7.0
.TP
.B Args:
x_1 (str): comma concatenated string
.TP
.B Returns:
list: the first element goes last now
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.range_prep(x_1)
This function process some string input and converts them to a
list which is used as a range on other fuctions.
.INDENT 7.0
.TP
.B Args:
x_1 (str): comma concatenated string
.TP
.B Returns:
list: list of float or list of list and floats
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.mrun_propagation(par, entry_list, defs2)
Ths function grabs the values from defs2 whcih serves as the set
of input for the tprocess function.
.INDENT 7.0
.TP
.B Args:
par (tkinter.Toplevel): top level container
entry_list (list): list of tkinter.Entry or tkinter.OptionMenu
defs2 (list): values
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.SUPER_THREAD_RUN
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.tprocess(defs)
This function creates a thread and sed defs to the
BioSANS2020.prepcodes.process function.
.INDENT 7.0
.TP
.B Args:
defs (list): inputs for process fucntion
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.analysis_case(ana_case, itups)
This function  redirects input to  the corresponding numerical or
plotting processes.
.INDENT 7.0
.TP
.B Args:
ana_case (str): type of analysis
itups (tuple): (canvas, scroll_x, scroll_y)
.TP
.B Returns:
np.ndarray : numerical values or None
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.plot_traj_d(current_data, itups)
This function plot the trajectory data stored as current data.
The plot can be the phase portrait.
.INDENT 7.0
.TP
.B Args:
current_data (np.ndarray or list): loaded data
itups (tuple): (canvas, scroll_x, scroll_y)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.get_checked(el_1, slabels)
This function returns the components name with a check from el_1
check boxes list.
.INDENT 7.0
.TP
.B Args:
el_1 (list): list of values
slabels (list):components or species labels
.TP
.B Returns:
[type]: [description]
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.plot_traj_d2(current_data, itups)
This function is another plotting function.
.INDENT 7.0
.TP
.B Args:
current_data (np.ndarray or list): loaded data
itups (tuple): (canvas, scroll_x, scroll_y)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.param_set(method)
This function opens the parameter setting dialof box and grab the
user custom settings.
.INDENT 7.0
.TP
.B Args:
.INDENT 7.0
.TP
.B method (str): Defaults to "CLE". Any of the option in
the list of available method keywords is listed below;
.sp
Stochastic (refer to section 10.2.4)
.INDENT 7.0
.IP 1. 3
"CLE"            \- Molecules(micro), tau\-adaptive
.IP 2. 3
"CLE2"           \- Molecules(micro), cle\-fixIntvl
.IP 3. 3
"
.nf
Gillespie_
.fi
"     \- Molecules(micro), Direct method
.IP 4. 3
.INDENT 3.0
.TP
.B "Tau\-leaping"    \- Molecules(micro),
Not swapping with Gillespie
.UNINDENT
.IP 5. 3
.INDENT 3.0
.TP
.B "Tau\-leaping2"   \- Molecules(micro),
Swapping with Gillespie
.UNINDENT
.IP 6. 3
.INDENT 3.0
.TP
.B "Sim\-TauLeap"    \- Molecules(micro), Simplified,
Swapping with Gillespie
.UNINDENT
.UNINDENT
.sp
Deterministic (refer to section 10.2.1)
.INDENT 7.0
.IP 7. 4
"Euler\-1"        \- Molecules(micro), tau\-adaptive\-1
.IP 8. 4
"Euler\-2"        \- Molar (macro), tau\-adaptive\-1
.IP 9. 4
"Euler\-3"        \- Mole (macro), tau\-adaptive\-1
.IP 10. 4
"Euler2\-1"           \- Molecules(micro), tau\-adaptive\-2
.IP 11. 4
"Euler2\-2"       \- Molar (macro), tau\-adaptive\-2
.IP 12. 4
"Euler2\-3"       \- Mole (macro), tau\-adaptive\-2
.IP 13. 4
.INDENT 4.0
.TP
.B "ODE\-1"          \- Molecules(micro),
using ode_int from scipy
.UNINDENT
.IP 14. 4
.INDENT 4.0
.TP
.B "ODE\-2"          \- Molar(macro),
using ode_int from scipy
.UNINDENT
.IP 15. 4
"ODE\-3"          \- Mole(macro), using ode_int from scipy
.IP 16. 4
"rk4\-1"          \- Molecules(micro), fix\-interval
.IP 17. 4
"rk4\-2"          \- Molar(macro), fix\-interval
.IP 18. 4
"rk4\-3"          \- Mole(macro), fix\-interval
.IP 19. 4
"rk4\-1a"         \- Molecules(micro), tau\-adaptive
.IP 20. 4
"rk4\-2a"         \- Molar(macro), tau\-adaptive
.IP 21. 4
"rk4\-3a"         \- Mole(macro), tau\-adaptive
.UNINDENT
.sp
Linear Noise Approximation (refer to 10.1.2 & 10.2.2)
.INDENT 7.0
.IP 22. 4
"LNA"             \- Numeric, values
.IP 23. 4
"LNA\-vs"          \- Symbolic, values, Macroscopic
.IP 24. 4
"LNA\-ks"          \- Symbolic, f(ks), Macroscopic
.IP 25. 4
"LNA\-xo"          \- Symbolic, f(xo), Macroscopic
.IP 26. 4
"LNA2"            \- Symbolic, f(xo,ks), Microscopic
.IP 27. 4
"LNA3"            \- Symbolic, f(xo,ks), Macroscopic
.IP 28. 4
"LNA(t)"          \- COV\-time\-dependent, Macroscopic
.IP 29. 4
"LNA2(t)"         \- FF\-time\-dependent, Macroscopic
.UNINDENT
.sp
Network Localization (refer to 10.1.3)
.INDENT 7.0
.IP 30. 4
"NetLoc1"         \- Symbolic, Macroscopic
.IP 31. 4
"NetLoc2"         \- Numeric, Macroscopic
.UNINDENT
.sp
Parameter estimation (refer to 10.2.3)
.INDENT 7.0
.IP 32. 5
"k_est1"          \- MCEM, Macroscopic
.IP 33. 5
"k_est2"          \- MCEM, Microscopic
.IP 34. 5
"k_est3"          \- NM\-Diff. Evol., Macroscopic
.IP 35. 5
"k_est4"          \- NM\-Diff. Evol., Microscopic
.IP 36. 5
"k_est5"          \- Parameter slider/scanner
.IP 37. 5
"k_est6"          \- Nelder\-Mead (NM), Macroscopic
.IP 38. 5
"k_est7"          \- Nelder\-Mead (NM), Microscopic
.IP 39. 5
"k_est8"          \- Powell, Macroscopic
.IP 40. 5
"k_est9"          \- Powell, Microscopic
.IP 41. 5
"k_est10"         \- L\-BFGS\-B, Macroscopic
.IP 42. 5
"k_est11"         \- L\-BFGS\-B, Microscopic
.UNINDENT
.sp
Symbolic/Analytical expression of species (refer to 10.1.1)
.INDENT 7.0
.IP 43. 4
"Analyt"          \- Pure Symbolic :f(t,xo,k)
.IP 44. 4
"Analyt\-ftx"      \- Semi\-Symbolic :f(t,xo)
.IP 45. 4
"SAnalyt"         \- Semi\-Symbolic :f(t)
.IP 46. 4
"SAnalyt\-ftk"     \- Semi\-Symbolic :f(t,k)
.IP 47. 4
"Analyt2"         \- Creates commands for wxmaxima
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSANS.MENUBUT1
.UNINDENT
.SS \fI\%BioSANS2020.BioSSL\fP
.INDENT 0.0
.INDENT 3.5
This module is the BioSSl module
.UNINDENT
.UNINDENT
.sp
This module process SSL (structured simulation language) queries.
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%eval2\fP(to_eval)
T}	T{
Evaluate expression
T}
_
T{
\fI\%show_file_dir\fP(path)
T}	T{
This function opens the current working directory
T}
_
T{
\fI\%get_input\fP()
T}	T{
Thi function get the input commands as user type in console
T}
_
T{
\fI\%process_command\fP(command)
T}	T{
This function handles the processing of commands.
T}
_
.TE
.SS Attributes
.TS
center;
|l|l|.
_
T{
\fI\%CWD\fP
T}	T{
T}
_
T{
\fI\%TRAJ\fP
T}	T{
T}
_
T{
\fI\%ABSPATH\fP
T}	T{
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.BioSSL.CWD
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSSL.TRAJ
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSSL.eval2(to_eval)
Evaluate expression
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSSL.show_file_dir(path)
This function opens the current working directory
.INDENT 7.0
.TP
.B Args:
path (str): current working directory
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSSL.get_input()
Thi function get the input commands as user type in console
.INDENT 7.0
.TP
.B Returns:
str: The input command
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSSL.process_command(command)
This function handles the processing of commands.
.INDENT 7.0
.TP
.B Args:
command (str): string of commands
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.BioSSL.ABSPATH
.UNINDENT
.SS \fI\%BioSANS2020.RunBioSANS\fP
.INDENT 0.0
.INDENT 3.5
This module is the RunBioSANS module
.UNINDENT
.UNINDENT
.sp
This can be used to run BioSANS and BioSSL byb running the following.
.sp
BioSSL()
BioSANS()
.SS Module Contents
.SS Functions
.TS
center;
|l|l|.
_
T{
\fI\%BioSANS\fP()
T}	T{
This function launched BioSANS
T}
_
T{
\fI\%BioSSL\fP()
T}	T{
This function launched BioSSL
T}
_
T{
\fI\%biosans\fP()
T}	T{
This function launched BioSANS
T}
_
T{
\fI\%biossl\fP()
T}	T{
This function launched BioSSL
T}
_
.TE
.INDENT 0.0
.TP
.B BioSANS2020.RunBioSANS.BioSANS()
This function launched BioSANS
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.RunBioSANS.BioSSL()
This function launched BioSSL
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.RunBioSANS.biosans()
This function launched BioSANS
.UNINDENT
.INDENT 0.0
.TP
.B BioSANS2020.RunBioSANS.biossl()
This function launched BioSSL
.UNINDENT
.SS \fI\%BioSANS2020.__main__\fP
.INDENT 0.0
.INDENT 3.5
This is the __main__ module
.UNINDENT
.UNINDENT
.sp
This module calls the BioSANS function in BioSANS2020.RunBioSANS.
.SS \fI\%conf\fP
.SS Module Contents
.INDENT 0.0
.TP
.B conf.project  = biosans.doc
.UNINDENT
.INDENT 0.0
.TP
.B conf.copyright  = 2021, Erickson Fajiculay
.UNINDENT
.INDENT 0.0
.TP
.B conf.author  = Erickson Fajiculay
.UNINDENT
.INDENT 0.0
.TP
.B conf.release  = 0.2.0
.UNINDENT
.INDENT 0.0
.TP
.B conf.extensions  = []
.UNINDENT
.INDENT 0.0
.TP
.B conf.templates_path  = [\(aq_templates\(aq]
.UNINDENT
.INDENT 0.0
.TP
.B conf.exclude_patterns  = [\(aq_build\(aq, \(aqThumbs.db\(aq, \(aq.DS_Store\(aq]
.UNINDENT
.INDENT 0.0
.TP
.B conf.html_theme  = alabaster
.UNINDENT
.INDENT 0.0
.TP
.B conf.html_static_path  = [\(aq_static\(aq]
.UNINDENT
.INDENT 0.0
.TP
.B conf.extensions  = [\(aqautoapi.extension\(aq]
.UNINDENT
.INDENT 0.0
.TP
.B conf.autoapi_dirs  = [\(aq../../BioSANS2020\(aq]
.UNINDENT
.IP [1] 5
Created with \fI\%sphinx\-autoapi\fP
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Erickson Fajiculay
.SH COPYRIGHT
2021, Erickson Fajiculay
.\" Generated by docutils manpage writer.
.
