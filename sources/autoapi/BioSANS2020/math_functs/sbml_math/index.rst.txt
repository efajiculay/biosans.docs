:py:mod:`BioSANS2020.math_functs.sbml_math`
===========================================

.. py:module:: BioSANS2020.math_functs.sbml_math

.. autoapi-nested-parse::

                     This module in the sbml_math module

   This contains function needed to interpret SBML files.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   BioSANS2020.math_functs.sbml_math.acos
   BioSANS2020.math_functs.sbml_math.arccos
   BioSANS2020.math_functs.sbml_math.acosh
   BioSANS2020.math_functs.sbml_math.arccosh
   BioSANS2020.math_functs.sbml_math.acot
   BioSANS2020.math_functs.sbml_math.arccot
   BioSANS2020.math_functs.sbml_math.acoth
   BioSANS2020.math_functs.sbml_math.arccoth
   BioSANS2020.math_functs.sbml_math.acsc
   BioSANS2020.math_functs.sbml_math.arccsc
   BioSANS2020.math_functs.sbml_math.acsch
   BioSANS2020.math_functs.sbml_math.arccsch
   BioSANS2020.math_functs.sbml_math.arcsec
   BioSANS2020.math_functs.sbml_math.asech
   BioSANS2020.math_functs.sbml_math.arcsech
   BioSANS2020.math_functs.sbml_math.asin
   BioSANS2020.math_functs.sbml_math.asinh
   BioSANS2020.math_functs.sbml_math.arcsinh
   BioSANS2020.math_functs.sbml_math.arcsin
   BioSANS2020.math_functs.sbml_math.atan
   BioSANS2020.math_functs.sbml_math.arctan
   BioSANS2020.math_functs.sbml_math.atanh
   BioSANS2020.math_functs.sbml_math.arctanh
   BioSANS2020.math_functs.sbml_math.ceil
   BioSANS2020.math_functs.sbml_math.ceiling
   BioSANS2020.math_functs.sbml_math.cos
   BioSANS2020.math_functs.sbml_math.cosh
   BioSANS2020.math_functs.sbml_math.cot
   BioSANS2020.math_functs.sbml_math.coth
   BioSANS2020.math_functs.sbml_math.csc
   BioSANS2020.math_functs.sbml_math.csch
   BioSANS2020.math_functs.sbml_math.factorial
   BioSANS2020.math_functs.sbml_math.exp
   BioSANS2020.math_functs.sbml_math.floor
   BioSANS2020.math_functs.sbml_math.ln
   BioSANS2020.math_functs.sbml_math.log
   BioSANS2020.math_functs.sbml_math.log10
   BioSANS2020.math_functs.sbml_math.piecewise
   BioSANS2020.math_functs.sbml_math.pow
   BioSANS2020.math_functs.sbml_math.power
   BioSANS2020.math_functs.sbml_math.root
   BioSANS2020.math_functs.sbml_math.sec
   BioSANS2020.math_functs.sbml_math.sech
   BioSANS2020.math_functs.sbml_math.sqr
   BioSANS2020.math_functs.sbml_math.sqrt
   BioSANS2020.math_functs.sbml_math.sin
   BioSANS2020.math_functs.sbml_math.sinh
   BioSANS2020.math_functs.sbml_math.tan
   BioSANS2020.math_functs.sbml_math.tanh
   BioSANS2020.math_functs.sbml_math.And
   BioSANS2020.math_functs.sbml_math.Not
   BioSANS2020.math_functs.sbml_math.Or
   BioSANS2020.math_functs.sbml_math.xor
   BioSANS2020.math_functs.sbml_math.eq
   BioSANS2020.math_functs.sbml_math.geq
   BioSANS2020.math_functs.sbml_math.gt
   BioSANS2020.math_functs.sbml_math.leq
   BioSANS2020.math_functs.sbml_math.lt
   BioSANS2020.math_functs.sbml_math.neq
   BioSANS2020.math_functs.sbml_math.plus
   BioSANS2020.math_functs.sbml_math.times
   BioSANS2020.math_functs.sbml_math.minus
   BioSANS2020.math_functs.sbml_math.divide
   BioSANS2020.math_functs.sbml_math.multiply



Attributes
~~~~~~~~~~

.. autoapisummary::

   BioSANS2020.math_functs.sbml_math.NUMBER_TYPE
   BioSANS2020.math_functs.sbml_math.SBML_FUNCT_DICT


.. py:data:: NUMBER_TYPE
   

   

.. py:function:: acos(xvar)

   returns sympy.acos(xvar).evalf()


.. py:function:: arccos(xvar)

   returns sympy.acos(xvar).evalf()


.. py:function:: acosh(xvar)

   returns sympy.acosh(xvar).evalf()


.. py:function:: arccosh(xvar)

   returns sympy.acosh(xvar).evalf()


.. py:function:: acot(xvar)

   returns sympy.acot(xvar).evalf()


.. py:function:: arccot(xvar)

   returns sympy.acot(xvar).evalf()


.. py:function:: acoth(xvar)

   returns sympy.acoth(xvar).evalf()


.. py:function:: arccoth(xvar)

   returns sympy.acoth(xvar).evalf()


.. py:function:: acsc(xvar)

   returns sympy.acsc(xvar).evalf()


.. py:function:: arccsc(xvar)

   returns sympy.acsc(xvar).evalf()


.. py:function:: acsch(xvar)

   returns sympy.acsch(xvar).evalf()


.. py:function:: arccsch(xvar)

   returns sympy.acsch(xvar).evalf()


.. py:function:: arcsec(xvar)

   returns sympy.asec(xvar).evalf()


.. py:function:: asech(xvar)

   returns sympy.asech(xvar).evalf()


.. py:function:: arcsech(xvar)

   returns sympy.asech(xvar).evalf()


.. py:function:: asin(xvar)

   returns sympy.asin(xvar).evalf()


.. py:function:: asinh(xvar)

   returns sympy.asinh(xvar).evalf()


.. py:function:: arcsinh(xvar)

   returns sympy.asinh(xvar).evalf()


.. py:function:: arcsin(xvar)

   returns sympy.asin(xvar).evalf()


.. py:function:: atan(xvar)

   returns sympy.atan(xvar).evalf()


.. py:function:: arctan(xvar)

   returns sympy.atan(xvar).evalf()


.. py:function:: atanh(xvar)

   returns sympy.atanh(xvar).evalf()


.. py:function:: arctanh(xvar)

   returns sympy.atanh(xvar).evalf()


.. py:function:: ceil(xvar)

   returns sympy.ceiling(xvar).evalf()


.. py:function:: ceiling(xvar)

   returns sympy.ceiling(xvar).evalf()


.. py:function:: cos(xvar)

   returns sympy.cos(xvar).evalf()


.. py:function:: cosh(xvar)

   returns sympy.cosh(xvar).evalf()


.. py:function:: cot(xvar)

   returns sympy.cot(xvar).evalf()


.. py:function:: coth(xvar)

   returns sympy.coth(xvar).evalf()


.. py:function:: csc(xvar)

   returns sympy.csc(xvar).evalf()


.. py:function:: csch(xvar)

   returns sympy.csch(xvar).evalf()


.. py:function:: factorial(xvar)

   returns sympy.factorial(xvar).evalf()


.. py:function:: exp(xvar)

   returns sympy.exp(xvar).evalf()


.. py:function:: floor(xvar)

   returns sympy.floor(xvar).evalf()


.. py:function:: ln(xvar)

   returns sympy.ln(xvar).evalf()


.. py:function:: log(xvar)

   returns sympy.log(xvar).evalf()


.. py:function:: log10(xvar)

   returns sympy.log(xvar, 10).evalf()


.. py:function:: piecewise(*xvar)

   returns the value before the first True value in xvar. If there
   is no True value, returns the last element in vxar


.. py:function:: pow(xvar, yvar)

   sympy.Pow(xvar, yvar).evalf()


.. py:function:: power(xvar, yvar)

   sympy.Pow(xvar, yvar).evalf()


.. py:function:: root(nvar, xvar)

   sympy.root(xvar, nvar).evalf()


.. py:function:: sec(xvar)

   returns sympy.sec(xvar).evalf()


.. py:function:: sech(xvar)

   sympy.sech(xvar).evalf()


.. py:function:: sqr(xvar)

   sympy.sqrt(xvar).evalf()


.. py:function:: sqrt(xvar)

   sympy.sqrt(xvar).evalf()


.. py:function:: sin(xvar)

   sympy.sin(xvar).evalf()


.. py:function:: sinh(xvar)

   sympy.sinh(xvar).evalf()


.. py:function:: tan(xvar)

   sympy.tan(xvar).evalf()


.. py:function:: tanh(xvar)

   sympy.tanh(xvar).evalf()


.. py:function:: And(*xvar)

   returns True if all elements of xvar is True else returns False


.. py:function:: Not(xvar)

   returns the reverse of the boolean value of xvar


.. py:function:: Or(*xvar)

   returns True if at least one value in xvar is True else False


.. py:function:: xor(*xvar)

   returns True if there is odd number of True else returns False


.. py:function:: eq(*xvar)

   returns True if xvar[0] == xvar[1:] else returns False


.. py:function:: geq(*xvar)

   returns True if xvar[0] >= xvar[1:] else returns False


.. py:function:: gt(*xvar)

   returns True if xvar[0] > xvar[1:] else returns False


.. py:function:: leq(*xvar)

   returns True if xvar[0] <= xvar[1:] else returns False


.. py:function:: lt(*xvar)

   returns True if xvar[0] < xvar[1:] else returns False


.. py:function:: neq(xvar, yvar)

   returns True if xvar != yvar else returns False


.. py:function:: plus(*xvar)

   sum(xvar).evalf()


.. py:function:: times(*xvar)

   returns the product of all elements in the list xvar


.. py:function:: minus(xvar, yvar)

   returns xvar - yvar


.. py:function:: divide(xvar, yvar)

   returns xvar / yvar


.. py:function:: multiply(*xvar)

   returns the product of all elements in the list xvar


.. py:data:: SBML_FUNCT_DICT
   

   

